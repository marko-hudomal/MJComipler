package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}
init with {:
	errorDetected = false;
:}
scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

	
	 
terminal PROGRAM, BREAK, CLASS, INTERFACE, ENUM, ELSE, CONST, IF ,NEW, PRINT;
terminal LBRACE, RBRACE, LBRACKET, RBRACKET, LPAREN, RPAREN, SEMI, COMMA, DOT;
terminal PLUS, MINUS, MUL, DIV, PERC;
terminal EQUAL, PLUS_PLUS, MINUS_MINUS, EQUAL_EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL, AND, OR;
terminal READ, RETURN, VOID, FOR, EXTENDS, IMPLEMENTS, CONTINUE;

terminal Integer NUMBER ;
terminal String IDENT ;
terminal Character CHAR ;
terminal BOOLEAN ;

nonterminal MethodDeclList, DeclList, Decl;
nonterminal ConstList;
nonterminal VarList;
nonterminal ClassDecl, Ext, Impl, TypeList, VarDeclList;
nonterminal EnumList;
nonterminal InterfaceDecl, InterfaceMethodDeclList, InterfaceMethodDecl;

nonterminal FormPars, FormalParamList, FormalParamDecl;

nonterminal DesignatorStatementOrNull, ConditionOrNull, DesignatorStatement;
nonterminal ActPars;
nonterminal IdentExprList;
nonterminal Assignop, Relop, Addop, Mulop;

nonterminal StatementList;
nonterminal NewNode, MinusOrNull, ActParsList;

nonterminal Semi;
nonterminal DesignatorStatementAssignExpr;
nonterminal ClassVarDeclList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, ClassDeclIdent, VarDeclType, VarDecl, ConstDeclType, ConstDecl,EnumDecl, EnumIdent, Enumeration, ClassVarDecl, ClassVarDeclType;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Variable, IdentEqualConstant, DesignatorIdent; 
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodTypeName, MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, Statement;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ForHeader;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, ReturnTypes;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr, Term, Factor, Constant;
nonterminal rs.etf.pp1.symboltable.concepts.Struct IfCondition, Condition, CondTermList, CondTerm, CondFactList, CondFact;

precedence left ELSE;

Program ::= (Program) PROGRAM ProgName:p DeclList LBRACE MethodDeclList RBRACE;

ProgName::= (ProgName) IDENT:progName;


MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
MethodDecl ::= (MethodDecl) MethodTypeName:tn LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE;				
MethodTypeName ::=(MethodTypeName) ReturnTypes:returnType IDENT:methodName;

Type ::= (TypeNode) IDENT:typeName;
DeclList ::=(Declarations) DeclList Decl
			|
			(NoDecl) /* epsilon */
			;	
Decl ::= (ConstDeclaration) ConstDecl
		|
		(VarDeclaration) VarDecl 
		|
		(ClassDeclaration) ClassDecl
		|
		(EnumDeclaration) EnumDecl
		|
		(InterfaceDeclaration) InterfaceDecl
		;
ConstDecl ::=(ConstDeclNode) CONST ConstDeclType ConstList SEMI;
ConstDeclType ::= (ConstDeclType) Type:typeName;

ConstList ::=(Constants) ConstList COMMA IdentEqualConstant
			|
			(SingleConstant) IdentEqualConstant
			;
IdentEqualConstant::=(IdentEqualConstantNode) IDENT:constName EQUAL Constant:constValue
				|							
			   	(ErrorConstant) error:x
			   	{: parser.report_error("[Globalna prom.] Izvrsen oporavak do sledeceg ','/';' u liniji " + xleft, null);  :}
			   	;					
Constant ::=(NumberNode) NUMBER:number
			|
			(CharNode) CHAR:chr
			|
			(BooleanNode) BOOLEAN:b	   
			;
VarDecl ::= (VarDeclNode) VarDeclType:t VarList SEMI;
VarDeclType::=(VarDeclType) Type:varType;

VarList ::= (Variables) VarList COMMA Variable
			|
			(SingleVariable) Variable
			;
 		
Variable::= (VariableNoBracket) IDENT:varName
			|
			(VariableBracket) IDENT:varName LBRACKET RBRACKET
			;	
ClassDecl::=(ClassDeclarationWithoutMethods) CLASS ClassDeclIdent Ext Impl LBRACE ClassVarDeclList RBRACE
			|			
			(ClassDeclarationWithMethods) CLASS ClassDeclIdent Ext Impl LBRACE ClassVarDeclList LBRACE MethodDeclList RBRACE RBRACE
			;
ClassDeclIdent::=(ClassDeclIdent) IDENT:classIdent;
			
ClassVarDeclList::=(ClassVarDeclarationList) ClassVarDeclList ClassVarDecl
					|
					(NoClassVarDeclaration) /* epsilon */
					;
ClassVarDecl::= (ClassVarDeclNode) ClassVarDeclType:t VarList SEMI
				|
				(ErrorClassVarDecl) error
				{: parser.report_error("[Deklaracija prom. u klasi] Izvrsen oporavak do sledeceg ';'/'{' ", null);  :}
				;
ClassVarDeclType::=(ClassVarDeclType) Type:classVarType;
			
Ext ::=		(Extension) EXTENDS Type
			|
			(ErrorExtension) error:l
			{: parser.report_error("[Extends] Izvrsen oporavak do sledeceg 'implements'/'{' u liniji " + lleft, null);  :}
			|		
			(NoExtension) /* epsilon */
			;			
Impl ::=	(Implementation) IMPLEMENTS	 TypeList
			|
			(NoImplementation) /* epsilon */
			;		
TypeList::= (TypeListNode) TypeList COMMA Type
			|
			(SinglType) Type
			;
VarDeclList::=  (VarDeclarationList) VarDeclList VarDecl
				|
				(NoVarDeclaration) /* epsilon */
				;		
EnumDecl ::=(EnumDeclarationNode) ENUM EnumIdent:enumIdent LBRACE EnumList RBRACE;
EnumIdent::=(EnumIdent) IDENT:enumIdent;

EnumList ::=(Enumerations) EnumList COMMA Enumeration
			|
			(SingleEnumeration) Enumeration
			;
Enumeration ::= (EnumerationNoVal) IDENT:identName
				|
				(EnumerationVal) IDENT:identName EQUAL NUMBER
				;	
InterfaceDecl ::=		    (InterfaceDeclarationNode) INTERFACE IDENT LBRACE InterfaceMethodDeclList RBRACE;
InterfaceMethodDeclList::=  (InterfaceMethodDeclarations) InterfaceMethodDeclList InterfaceMethodDecl	
							|
							(NoInterfaceMethodDeclaration) /* epsilon */
							;
InterfaceMethodDecl	::=		(InterfaceMethodDeclarationWithParams) ReturnTypes IDENT LPAREN FormPars RPAREN SEMI
							;
ReturnTypes ::=			(NoVoidType) Type:typeName
						|
						(VoidType) VOID:voidName
						;
FormPars ::= (FormalParams) FormalParamList
		  |
		  (NoFormalParam) /* epsilon */
		  ;
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
		|
		(SingleFormalParamDecl) FormalParamDecl
		;
FormalParamDecl ::= (FormalParamDeclarationBrackets) Type:paramType IDENT:paramName LBRACKET RBRACKET
					|
					(FormalParamDeclarationNoBrackets) Type:paramType IDENT:paramName
					|
					(ErrorFormParam) error:x
					{: parser.report_error("[Formalni parametar] Izvrsen oporavak do sledeceg ',')' u liniji " + xleft, null);  :}
					;	
StatementList ::= (Statements) StatementList Statement
				|
				(NoStatement) /* epsilon */
				;					
Statement ::= (ErrorAssign) error SEMI:l
			{: parser.report_error("[Dodela vrednosti] Izvrsen oporavak do sledeceg ';' u liniji " + lleft, null);  :}
			|
			(DesignatorStatementOnly) DesignatorStatement SEMI
			|
			(IfStatement) IF LPAREN IfCondition RPAREN Statement
		    |
		    (IfElseStatement) IF LPAREN IfCondition RPAREN Statement ELSE Statement
		    |
		    (ForStatement) FOR LPAREN ForHeader RPAREN Statement
			|
			(BreakStatement) BREAK Semi
			| 
			(ContinueStatement) CONTINUE Semi
			|
			(ReturnStatementExpr) RETURN Expr:exprName SEMI
			|
			(ReturnStatementVoid) RETURN SEMI
			|
			(ReadStatement) READ LPAREN Designator RPAREN SEMI
			|
			(PrintStatement) PRINT LPAREN Expr RPAREN SEMI
			|
			(PrintWithNumConstStatement) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
			|
			(InBraceStatement) LBRACE StatementList RBRACE
		  	;
Semi::=SEMI;		  	
ForHeader::= (ForHeader) DesignatorStatementOrNull SEMI ConditionOrNull SEMI DesignatorStatementOrNull;		  	
IfCondition::= 	(IfConditionNode) Condition
				|
				(ErrorIfElseStatement) error:x
		    	{: parser.report_error("[IfElse Condition] Izvrsen oporavak do sledeceg ')' u liniji " + xleft, null);  :}
		    	;	  	
DesignatorStatementOrNull ::=   (DesignatorStatementNotNull) DesignatorStatement
								|
								(DesignatorStatementNull) /* epsilon */
								;
ConditionOrNull ::= (ConditionNotNull) Condition
					|
					(ConditionNull) /* epsilon */
					;
 
DesignatorStatement::=  (DesignatorStatementAssignop) Designator Assignop Expr
						|
						(DesignatorStatementActPars) Designator LPAREN ActPars RPAREN
						|
						(DesignatorStatementPlusPlus) Designator PLUS_PLUS
						|
						(DesignatorStatementMinusMinus) Designator MINUS_MINUS
						;
/*						
DesignatorStatementAssignExpr::=(DesignatorAssignExpresion) Expr
								|
								(ErrorDesignatorAssignExpresion) error:x
			   					{: parser.report_error("[Dodela vrednosti] Izvrsen oporavak do sledeceg ';' u liniji " + xleft, null);  :}
			   					;
*/			   													
ActPars::=		(ActParsNode) ActParsList
				|
				(NoActAprsNode) /* epsilon */	
				;											
ActParsList::=		(ActualParametres) ActParsList COMMA Expr
					|
					(SingleActualParam) Expr 
					;
Condition::= (ConditionNode) CondTermList;
CondTermList::= (ConditionTerms) CondTermList OR CondTerm
				|
				(SingleConditionTerm) CondTerm
				;	
CondTerm::= (ConditionTermNode) CondFactList;
CondFactList::= (ConditionFacts) CondFactList AND:and CondFact:c
				|
				(SingleConditionFact) CondFact:condFact
				;
 			
CondFact::= (CondFactExpression) Expr
			|
			(CondFactExpressionRelopExpression)  Expr:left Relop:r Expr:right
			;
 
			
Expr ::= (ExpressionNode) Expr:e Addop Term:t
		 | 
		 (SingleExpression) MinusOrNull Term:t
		 ;																	
MinusOrNull::= (SingleMinus) MINUS
			|
			(NoSingleMinus) /* epsilon */
			;
Term ::= 	(TermNode) Term:t Mulop Factor:f
			|
			(TermFactor)Factor:f
			;
			
Factor ::=	(DesignatorEmpty) Designator:d
			|
		  	(DesignatorBraceActPars) Designator:d LPAREN ActPars RPAREN
			| 
			(ConstantNumber) NUMBER
			|
			(ConstantCharacter) CHAR
			|
			(ConstantBoolean) BOOLEAN
			|
			(NewEmpty) NEW Type NewNode
			|
			(ExprParenNode) LPAREN Expr RPAREN
			;
NewNode ::= (Node) LBRACKET Expr RBRACKET
			|
			(NodeEmpty) /* epsilon */	
			;
Designator ::= (DesignatorNode) DesignatorIdent IdentExprList;
DesignatorIdent ::=(DesignatorIdent) IDENT:baseName;

IdentExprList ::=	(Idents) IdentExprList DOT IDENT
					|
					(Exprs) IdentExprList LBRACKET Expr RBRACKET
					|
					(NoIdentExpr) /* epsilon */	
					;	
Assignop ::=(Assignop) EQUAL;
Relop ::=(RelopEqualEqual) EQUAL_EQUAL
		|
		(RelopNotEqual) NOT_EQUAL
		|
		(RelopGreater) GREATER
		|
		(RelopGreaterEqual) GREATER_EQUAL
		|
		(RelopLess) LESS
		|
		(RelopLessEqual) LESS_EQUAL
		;		
Addop ::= 	(AddopPlus) PLUS
			|
		  	(AddopMinus) MINUS
		  	;	
Mulop ::= 	(AddopMul) MUL
			|
		  	(AddopDiv) DIV
		  	|
		  	(AddopPerc) PERC
		  	;																								  																																																						