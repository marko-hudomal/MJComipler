INFO  01:58:19,741 - Compiling source file: D:\ETF\PP1\Projekat\workspace\MJCompiler\test\program.mj
INFO  01:58:19,771 - #2 program
INFO  01:58:19,772 - #45 MojProgram
INFO  01:58:19,772 - #8 const
INFO  01:58:19,772 - #45 int
INFO  01:58:19,772 - #45 test_konstanta
INFO  01:58:19,772 - #26 =
INFO  01:58:19,772 - #44 0
INFO  01:58:19,772 - #18 ;
INFO  01:58:19,772 - #45 int
INFO  01:58:19,773 - #45 test_variabla
INFO  01:58:19,773 - #14 [
INFO  01:58:19,773 - #15 ]
INFO  01:58:19,773 - #18 ;
INFO  01:58:19,773 - #4 class
INFO  01:58:19,773 - #45 Klasa
INFO  01:58:19,773 - #12 {
INFO  01:58:19,774 - #45 char
INFO  01:58:19,774 - #45 prom
INFO  01:58:19,774 - #19 ,
INFO  01:58:19,774 - #45 array
INFO  01:58:19,774 - #14 [
INFO  01:58:19,775 - #15 ]
INFO  01:58:19,775 - #19 ,
INFO  01:58:19,775 - #45 x
INFO  01:58:19,775 - #18 ;
INFO  01:58:19,775 - #45 char
INFO  01:58:19,775 - #45 m
INFO  01:58:19,775 - #18 ;
INFO  01:58:19,775 - #45 bool
INFO  01:58:19,775 - #45 a
INFO  01:58:19,775 - #19 ,
INFO  01:58:19,775 - #45 b
INFO  01:58:19,775 - #18 ;
INFO  01:58:19,775 - #45 Klasa2
INFO  01:58:19,775 - #45 k2
INFO  01:58:19,775 - #18 ;
INFO  01:58:19,776 - #12 {
INFO  01:58:19,776 - #45 char
INFO  01:58:19,776 - #45 funkc
INFO  01:58:19,776 - #16 (
INFO  01:58:19,776 - #45 bool
INFO  01:58:19,776 - #45 b
INFO  01:58:19,776 - #19 ,
INFO  01:58:19,776 - #45 char
INFO  01:58:19,776 - #45 o
INFO  01:58:19,777 - #17 )
INFO  01:58:19,777 - #45 int
INFO  01:58:19,777 - #45 prom_x
INFO  01:58:19,777 - #18 ;
INFO  01:58:19,777 - #45 char
INFO  01:58:19,777 - #45 prom_c1
INFO  01:58:19,777 - #19 ,
INFO  01:58:19,777 - #45 prom_c2
INFO  01:58:19,777 - #18 ;
INFO  01:58:19,777 - #12 {
INFO  01:58:19,777 - #45 prom_x
INFO  01:58:19,778 - #26 =
INFO  01:58:19,778 - #44 1
INFO  01:58:19,779 - #18 ;
INFO  01:58:19,779 - #45 prom_c1
INFO  01:58:19,779 - #26 =
INFO  01:58:19,779 - #46 A
INFO  01:58:19,779 - #21 +
INFO  01:58:19,779 - #44 5
INFO  01:58:19,780 - #18 ;
INFO  01:58:19,780 - #45 prom_c2
INFO  01:58:19,780 - #26 =
INFO  01:58:19,780 - #10 new
INFO  01:58:19,780 - #45 Klasa2
INFO  01:58:19,780 - #18 ;
INFO  01:58:19,781 - #38 return
INFO  01:58:19,781 - #22 -
INFO  01:58:19,781 - #45 metoda1_x
INFO  01:58:19,781 - #23 *
INFO  01:58:19,781 - #45 funkc
INFO  01:58:19,782 - #16 (
INFO  01:58:19,782 - #47 true
INFO  01:58:19,782 - #17 )
INFO  01:58:19,782 - #18 ;
INFO  01:58:19,782 - #13 }
INFO  01:58:19,782 - #39 void
INFO  01:58:19,783 - #45 funkc2
INFO  01:58:19,783 - #16 (
INFO  01:58:19,783 - #17 )
INFO  01:58:19,783 - #12 {
INFO  01:58:19,784 - #45 this
INFO  01:58:19,784 - #20 .
INFO  01:58:19,784 - #45 a
INFO  01:58:19,784 - #26 =
INFO  01:58:19,784 - #47 false
INFO  01:58:19,784 - #18 ;
INFO  01:58:19,784 - #9 if
INFO  01:58:19,784 - #16 (
INFO  01:58:19,784 - #45 this
INFO  01:58:19,784 - #20 .
INFO  01:58:19,784 - #45 a
INFO  01:58:19,784 - #29 ==
INFO  01:58:19,784 - #45 this
INFO  01:58:19,785 - #20 .
INFO  01:58:19,785 - #45 b
INFO  01:58:19,785 - #17 )
INFO  01:58:19,785 - #37 read
INFO  01:58:19,785 - #16 (
INFO  01:58:19,785 - #45 this
INFO  01:58:19,785 - #20 .
INFO  01:58:19,785 - #45 k2
INFO  01:58:19,785 - #20 .
INFO  01:58:19,785 - #45 a
INFO  01:58:19,785 - #14 [
INFO  01:58:19,785 - #44 0
INFO  01:58:19,785 - #15 ]
INFO  01:58:19,785 - #17 )
INFO  01:58:19,785 - #18 ;
INFO  01:58:19,785 - #7 else
INFO  01:58:19,786 - #12 {
INFO  01:58:19,786 - #9 if
INFO  01:58:19,786 - #16 (
INFO  01:58:19,786 - #47 true
INFO  01:58:19,786 - #17 )
INFO  01:58:19,786 - #12 {
INFO  01:58:19,786 - #3 break
INFO  01:58:19,786 - #18 ;
INFO  01:58:19,786 - #43 continue
INFO  01:58:19,786 - #18 ;
INFO  01:58:19,786 - #9 if
INFO  01:58:19,786 - #16 (
INFO  01:58:19,786 - #45 prom_x
INFO  01:58:19,787 - #36 ||
INFO  01:58:19,787 - #45 prom_c1
INFO  01:58:19,787 - #31 >
INFO  01:58:19,787 - #46 A
INFO  01:58:19,787 - #17 )
INFO  01:58:19,788 - #9 if
INFO  01:58:19,788 - #16 (
INFO  01:58:19,788 - #44 1
INFO  01:58:19,788 - #33 <
INFO  01:58:19,789 - #44 2
INFO  01:58:19,789 - #17 )
INFO  01:58:19,789 - #12 {
INFO  01:58:19,789 - #45 prom_x
INFO  01:58:19,789 - #26 =
INFO  01:58:19,789 - #44 15
INFO  01:58:19,789 - #18 ;
INFO  01:58:19,789 - #40 for
INFO  01:58:19,789 - #16 (
INFO  01:58:19,789 - #18 ;
INFO  01:58:19,789 - #18 ;
INFO  01:58:19,790 - #17 )
INFO  01:58:19,790 - #11 print
INFO  01:58:19,790 - #16 (
INFO  01:58:19,790 - #46 i
INFO  01:58:19,790 - #19 ,
INFO  01:58:19,790 - #44 2
INFO  01:58:19,790 - #17 )
INFO  01:58:19,790 - #18 ;
INFO  01:58:19,790 - #13 }
INFO  01:58:19,790 - #13 }
INFO  01:58:19,790 - #13 }
INFO  01:58:19,790 - #40 for
INFO  01:58:19,790 - #16 (
INFO  01:58:19,791 - #45 this
INFO  01:58:19,791 - #20 .
INFO  01:58:19,791 - #45 k2
INFO  01:58:19,791 - #20 .
INFO  01:58:19,791 - #45 a
INFO  01:58:19,791 - #14 [
INFO  01:58:19,791 - #44 0
INFO  01:58:19,791 - #21 +
INFO  01:58:19,791 - #44 0
INFO  01:58:19,791 - #15 ]
INFO  01:58:19,791 - #26 =
INFO  01:58:19,791 - #44 0
INFO  01:58:19,791 - #18 ;
INFO  01:58:19,791 - #45 this
INFO  01:58:19,791 - #20 .
INFO  01:58:19,791 - #45 k2
INFO  01:58:19,791 - #20 .
INFO  01:58:19,791 - #45 a
INFO  01:58:19,791 - #14 [
INFO  01:58:19,791 - #44 0
INFO  01:58:19,791 - #21 +
INFO  01:58:19,791 - #44 0
INFO  01:58:19,791 - #15 ]
INFO  01:58:19,791 - #33 <
INFO  01:58:19,791 - #44 2
INFO  01:58:19,791 - #18 ;
INFO  01:58:19,791 - #45 this
INFO  01:58:19,791 - #20 .
INFO  01:58:19,791 - #45 k2
INFO  01:58:19,792 - #20 .
INFO  01:58:19,792 - #45 a
INFO  01:58:19,792 - #14 [
INFO  01:58:19,792 - #44 0
INFO  01:58:19,792 - #21 +
INFO  01:58:19,792 - #44 0
INFO  01:58:19,792 - #21 +
INFO  01:58:19,792 - #10 new
INFO  01:58:19,792 - #45 Klasa2
INFO  01:58:19,792 - #14 [
INFO  01:58:19,792 - #44 2
INFO  01:58:19,792 - #23 *
INFO  01:58:19,792 - #44 5
INFO  01:58:19,792 - #25 %
INFO  01:58:19,792 - #44 2
INFO  01:58:19,792 - #15 ]
INFO  01:58:19,792 - #15 ]
INFO  01:58:19,792 - #27 ++
INFO  01:58:19,792 - #17 )
INFO  01:58:19,792 - #12 {
INFO  01:58:19,792 - #3 break
INFO  01:58:19,792 - #18 ;
INFO  01:58:19,792 - #43 continue
INFO  01:58:19,792 - #18 ;
INFO  01:58:19,792 - #9 if
INFO  01:58:19,793 - #16 (
INFO  01:58:19,793 - #45 this
INFO  01:58:19,793 - #20 .
INFO  01:58:19,793 - #45 k2
INFO  01:58:19,793 - #20 .
INFO  01:58:19,793 - #45 a
INFO  01:58:19,793 - #14 [
INFO  01:58:19,793 - #44 1
INFO  01:58:19,793 - #15 ]
INFO  01:58:19,793 - #21 +
INFO  01:58:19,793 - #45 funkc
INFO  01:58:19,793 - #16 (
INFO  01:58:19,793 - #47 true
INFO  01:58:19,793 - #17 )
INFO  01:58:19,793 - #31 >
INFO  01:58:19,793 - #44 2
INFO  01:58:19,793 - #17 )
INFO  01:58:19,793 - #37 read
INFO  01:58:19,793 - #16 (
INFO  01:58:19,793 - #45 this
INFO  01:58:19,793 - #20 .
INFO  01:58:19,793 - #45 k2
INFO  01:58:19,793 - #20 .
INFO  01:58:19,793 - #45 a
INFO  01:58:19,793 - #14 [
INFO  01:58:19,793 - #44 2
INFO  01:58:19,794 - #15 ]
INFO  01:58:19,794 - #17 )
INFO  01:58:19,794 - #18 ;
INFO  01:58:19,794 - #13 }
INFO  01:58:19,794 - #38 return
INFO  01:58:19,794 - #18 ;
INFO  01:58:19,794 - #13 }
INFO  01:58:19,794 - #13 }
INFO  01:58:19,794 - #13 }
INFO  01:58:19,794 - #4 class
INFO  01:58:19,794 - #45 Klasa2
INFO  01:58:19,794 - #12 {
INFO  01:58:19,794 - #45 int
INFO  01:58:19,794 - #45 a
INFO  01:58:19,794 - #14 [
INFO  01:58:19,795 - #15 ]
INFO  01:58:19,795 - #18 ;
INFO  01:58:19,795 - #13 }
INFO  01:58:19,795 - #4 class
INFO  01:58:19,795 - #45 Klasa3
INFO  01:58:19,795 - #12 {
INFO  01:58:19,795 - #13 }
INFO  01:58:19,795 - #5 interface
INFO  01:58:19,795 - #45 Interfejs1
INFO  01:58:19,795 - #12 {
INFO  01:58:19,795 - #39 void
INFO  01:58:19,795 - #45 printstr
INFO  01:58:19,795 - #16 (
INFO  01:58:19,795 - #45 char
INFO  01:58:19,795 - #45 str
INFO  01:58:19,795 - #14 [
INFO  01:58:19,795 - #15 ]
INFO  01:58:19,795 - #17 )
INFO  01:58:19,795 - #18 ;
INFO  01:58:19,795 - #13 }
INFO  01:58:19,796 - #5 interface
INFO  01:58:19,796 - #45 Interfejs2
INFO  01:58:19,796 - #12 {
INFO  01:58:19,796 - #45 Klasa3
INFO  01:58:19,796 - #45 vratiK3
INFO  01:58:19,796 - #16 (
INFO  01:58:19,796 - #17 )
INFO  01:58:19,796 - #18 ;
INFO  01:58:19,796 - #13 }
INFO  01:58:19,796 - #5 interface
INFO  01:58:19,796 - #45 Interfejs3
INFO  01:58:19,796 - #12 {
INFO  01:58:19,796 - #13 }
INFO  01:58:19,796 - #45 Klasa
INFO  01:58:19,796 - #45 klasa1
INFO  01:58:19,796 - #18 ;
INFO  01:58:19,796 - #8 const
INFO  01:58:19,796 - #45 int
INFO  01:58:19,796 - #45 konstanta1
INFO  01:58:19,796 - #26 =
INFO  01:58:19,796 - #44 5
INFO  01:58:19,796 - #19 ,
INFO  01:58:19,796 - #45 konstanta2
INFO  01:58:19,796 - #26 =
INFO  01:58:19,796 - #46 a
INFO  01:58:19,796 - #18 ;
INFO  01:58:19,797 - #45 bool
INFO  01:58:19,797 - #45 m
INFO  01:58:19,797 - #18 ;
INFO  01:58:19,797 - #8 const
INFO  01:58:19,797 - #45 bool
INFO  01:58:19,797 - #45 konstanta_m
INFO  01:58:19,797 - #26 =
INFO  01:58:19,797 - #47 false
INFO  01:58:19,797 - #18 ;
INFO  01:58:19,797 - #45 char
INFO  01:58:19,797 - #45 arr
INFO  01:58:19,797 - #14 [
INFO  01:58:19,797 - #15 ]
INFO  01:58:19,797 - #18 ;
INFO  01:58:19,797 - #4 class
INFO  01:58:19,797 - #45 Util
INFO  01:58:19,797 - #42 implements
INFO  01:58:19,798 - #45 Interfejs1
INFO  01:58:19,798 - #19 ,
INFO  01:58:19,798 - #45 Interfejs2
INFO  01:58:19,798 - #19 ,
INFO  01:58:19,798 - #45 Interfejs3
INFO  01:58:19,798 - #12 {
INFO  01:58:19,798 - #12 {
INFO  01:58:19,798 - #39 void
INFO  01:58:19,798 - #45 printstr
INFO  01:58:19,798 - #16 (
INFO  01:58:19,798 - #45 char
INFO  01:58:19,798 - #45 s
INFO  01:58:19,798 - #14 [
INFO  01:58:19,798 - #15 ]
INFO  01:58:19,798 - #17 )
INFO  01:58:19,798 - #45 Klasa2
INFO  01:58:19,798 - #45 k2
INFO  01:58:19,798 - #18 ;
INFO  01:58:19,798 - #45 char
INFO  01:58:19,798 - #45 chr
INFO  01:58:19,798 - #14 [
INFO  01:58:19,798 - #15 ]
INFO  01:58:19,798 - #18 ;
INFO  01:58:19,798 - #12 {
INFO  01:58:19,798 - #45 chr
INFO  01:58:19,798 - #26 =
INFO  01:58:19,798 - #10 new
INFO  01:58:19,798 - #45 char
INFO  01:58:19,798 - #14 [
INFO  01:58:19,798 - #44 3
INFO  01:58:19,798 - #15 ]
INFO  01:58:19,798 - #18 ;
INFO  01:58:19,798 - #45 chr
INFO  01:58:19,799 - #14 [
INFO  01:58:19,799 - #44 0
INFO  01:58:19,799 - #15 ]
INFO  01:58:19,799 - #26 =
INFO  01:58:19,799 - #46 I
INFO  01:58:19,799 - #18 ;
INFO  01:58:19,799 - #45 chr
INFO  01:58:19,799 - #14 [
INFO  01:58:19,799 - #44 1
INFO  01:58:19,799 - #15 ]
INFO  01:58:19,799 - #26 =
INFO  01:58:19,799 - #46 m
INFO  01:58:19,799 - #18 ;
INFO  01:58:19,799 - #45 chr
INFO  01:58:19,799 - #14 [
INFO  01:58:19,799 - #44 2
INFO  01:58:19,799 - #15 ]
INFO  01:58:19,799 - #26 =
INFO  01:58:19,799 - #46 a
INFO  01:58:19,799 - #18 ;
INFO  01:58:19,799 - #45 pca
INFO  01:58:19,799 - #26 =
INFO  01:58:19,799 - #10 new
INFO  01:58:19,799 - #45 PackedCharArray
INFO  01:58:19,799 - #18 ;
INFO  01:58:19,799 - #45 pca
INFO  01:58:19,799 - #20 .
INFO  01:58:19,799 - #45 array
INFO  01:58:19,799 - #26 =
INFO  01:58:19,799 - #45 chr
INFO  01:58:19,799 - #18 ;
INFO  01:58:19,799 - #38 return
INFO  01:58:19,799 - #45 pca
INFO  01:58:19,799 - #18 ;
INFO  01:58:19,799 - #13 }
INFO  01:58:19,799 - #45 Klasa3
INFO  01:58:19,799 - #45 vratiK3
INFO  01:58:19,799 - #16 (
INFO  01:58:19,799 - #17 )
INFO  01:58:19,799 - #12 {
INFO  01:58:19,799 - #38 return
INFO  01:58:19,800 - #22 -
INFO  01:58:19,800 - #10 new
INFO  01:58:19,800 - #45 Klasa3
INFO  01:58:19,800 - #18 ;
INFO  01:58:19,800 - #13 }
INFO  01:58:19,800 - #13 }
INFO  01:58:19,800 - #13 }
INFO  01:58:19,800 - #45 Interfejs3
INFO  01:58:19,800 - #45 i3
INFO  01:58:19,800 - #18 ;
INFO  01:58:19,800 - #4 class
INFO  01:58:19,800 - #45 Util2
INFO  01:58:19,800 - #41 extends
INFO  01:58:19,800 - #45 Util
INFO  01:58:19,800 - #42 implements
INFO  01:58:19,800 - #45 Interfejs1
INFO  01:58:19,800 - #12 {
INFO  01:58:19,800 - #12 {
INFO  01:58:19,800 - #39 void
INFO  01:58:19,800 - #45 printstr
INFO  01:58:19,800 - #16 (
INFO  01:58:19,800 - #45 char
INFO  01:58:19,800 - #45 str
INFO  01:58:19,800 - #14 [
INFO  01:58:19,800 - #15 ]
INFO  01:58:19,800 - #17 )
INFO  01:58:19,800 - #45 int
INFO  01:58:19,800 - #45 i
INFO  01:58:19,800 - #18 ;
INFO  01:58:19,800 - #12 {
INFO  01:58:19,800 - #40 for
INFO  01:58:19,800 - #16 (
INFO  01:58:19,800 - #45 i
INFO  01:58:19,800 - #26 =
INFO  01:58:19,801 - #44 0
INFO  01:58:19,801 - #18 ;
INFO  01:58:19,801 - #45 i
INFO  01:58:19,801 - #33 <
INFO  01:58:19,801 - #45 len
INFO  01:58:19,801 - #16 (
INFO  01:58:19,801 - #45 str
INFO  01:58:19,801 - #17 )
INFO  01:58:19,801 - #18 ;
INFO  01:58:19,801 - #45 i
INFO  01:58:19,801 - #27 ++
INFO  01:58:19,801 - #17 )
INFO  01:58:19,801 - #11 print
INFO  01:58:19,801 - #16 (
INFO  01:58:19,801 - #45 str
INFO  01:58:19,801 - #14 [
INFO  01:58:19,801 - #45 i
INFO  01:58:19,801 - #15 ]
INFO  01:58:19,801 - #17 )
INFO  01:58:19,801 - #18 ;
INFO  01:58:19,801 - #13 }
INFO  01:58:19,801 - #45 PackedCharArray
INFO  01:58:19,801 - #45 buildNema
INFO  01:58:19,801 - #16 (
INFO  01:58:19,801 - #17 )
INFO  01:58:19,801 - #45 PackedCharArray
INFO  01:58:19,801 - #45 pca
INFO  01:58:19,801 - #18 ;
INFO  01:58:19,801 - #45 char
INFO  01:58:19,801 - #45 chr
INFO  01:58:19,801 - #14 [
INFO  01:58:19,801 - #15 ]
INFO  01:58:19,801 - #18 ;
INFO  01:58:19,801 - #12 {
INFO  01:58:19,801 - #45 chr
INFO  01:58:19,801 - #26 =
INFO  01:58:19,801 - #10 new
INFO  01:58:19,801 - #45 char
INFO  01:58:19,801 - #14 [
INFO  01:58:19,801 - #44 4
INFO  01:58:19,801 - #15 ]
INFO  01:58:19,801 - #18 ;
INFO  01:58:19,801 - #45 chr
INFO  01:58:19,801 - #14 [
INFO  01:58:19,801 - #44 0
INFO  01:58:19,801 - #15 ]
INFO  01:58:19,801 - #26 =
INFO  01:58:19,801 - #46 N
INFO  01:58:19,801 - #18 ;
INFO  01:58:19,802 - #45 chr
INFO  01:58:19,802 - #14 [
INFO  01:58:19,802 - #44 1
INFO  01:58:19,802 - #15 ]
INFO  01:58:19,802 - #26 =
INFO  01:58:19,802 - #46 e
INFO  01:58:19,802 - #18 ;
INFO  01:58:19,802 - #45 chr
INFO  01:58:19,802 - #14 [
INFO  01:58:19,802 - #44 2
INFO  01:58:19,802 - #15 ]
INFO  01:58:19,802 - #26 =
INFO  01:58:19,802 - #46 m
INFO  01:58:19,802 - #18 ;
INFO  01:58:19,802 - #45 chr
INFO  01:58:19,802 - #14 [
INFO  01:58:19,802 - #44 3
INFO  01:58:19,802 - #15 ]
INFO  01:58:19,802 - #26 =
INFO  01:58:19,802 - #46 a
INFO  01:58:19,802 - #18 ;
INFO  01:58:19,802 - #45 pca
INFO  01:58:19,802 - #26 =
INFO  01:58:19,802 - #10 new
INFO  01:58:19,802 - #45 PackedCharArray
INFO  01:58:19,802 - #18 ;
INFO  01:58:19,802 - #45 pca
INFO  01:58:19,802 - #20 .
INFO  01:58:19,802 - #45 array
INFO  01:58:19,802 - #26 =
INFO  01:58:19,802 - #45 chr
INFO  01:58:19,802 - #18 ;
INFO  01:58:19,802 - #38 return
INFO  01:58:19,802 - #45 pca
INFO  01:58:19,802 - #18 ;
INFO  01:58:19,802 - #13 }
INFO  01:58:19,803 - #13 }
INFO  01:58:19,803 - #13 }
INFO  01:58:19,803 - #45 IUtil
INFO  01:58:19,803 - #45 util
INFO  01:58:19,803 - #18 ;
INFO  01:58:19,803 - #4 class
INFO  01:58:19,803 - #45 Node
INFO  01:58:19,803 - #12 {
INFO  01:58:19,803 - #45 Node
INFO  01:58:19,803 - #45 right
INFO  01:58:19,803 - #19 ,
INFO  01:58:19,803 - #45 left
INFO  01:58:19,803 - #18 ;
INFO  01:58:19,803 - #45 int
INFO  01:58:19,803 - #45 val
INFO  01:58:19,803 - #18 ;
INFO  01:58:19,803 - #12 {
INFO  01:58:19,803 - #39 void
INFO  01:58:19,803 - #45 insrt
INFO  01:58:19,803 - #16 (
INFO  01:58:19,803 - #45 int
INFO  01:58:19,803 - #45 v
INFO  01:58:19,803 - #17 )
INFO  01:58:19,803 - #12 {
INFO  01:58:19,803 - #9 if
INFO  01:58:19,803 - #16 (
INFO  01:58:19,803 - #45 v
INFO  01:58:19,803 - #31 >
INFO  01:58:19,803 - #45 val
INFO  01:58:19,803 - #17 )
INFO  01:58:19,803 - #12 {
INFO  01:58:19,803 - #9 if
INFO  01:58:19,803 - #16 (
INFO  01:58:19,803 - #45 right
INFO  01:58:19,803 - #29 ==
INFO  01:58:19,803 - #45 null
INFO  01:58:19,803 - #17 )
INFO  01:58:19,803 - #12 {
INFO  01:58:19,803 - #45 right
INFO  01:58:19,803 - #26 =
INFO  01:58:19,803 - #10 new
INFO  01:58:19,803 - #45 Node
INFO  01:58:19,803 - #18 ;
INFO  01:58:19,804 - #45 right
INFO  01:58:19,804 - #20 .
INFO  01:58:19,804 - #45 val
INFO  01:58:19,804 - #26 =
INFO  01:58:19,804 - #45 v
INFO  01:58:19,804 - #18 ;
INFO  01:58:19,804 - #13 }
INFO  01:58:19,804 - #7 else
INFO  01:58:19,804 - #12 {
INFO  01:58:19,804 - #45 right
INFO  01:58:19,804 - #20 .
INFO  01:58:19,804 - #45 insrt
INFO  01:58:19,804 - #16 (
INFO  01:58:19,804 - #45 v
INFO  01:58:19,804 - #17 )
INFO  01:58:19,804 - #18 ;
INFO  01:58:19,804 - #13 }
INFO  01:58:19,804 - #13 }
INFO  01:58:19,804 - #7 else
INFO  01:58:19,804 - #12 {
INFO  01:58:19,804 - #9 if
INFO  01:58:19,804 - #16 (
INFO  01:58:19,804 - #45 left
INFO  01:58:19,804 - #29 ==
INFO  01:58:19,804 - #45 null
INFO  01:58:19,804 - #17 )
INFO  01:58:19,804 - #12 {
INFO  01:58:19,804 - #45 left
INFO  01:58:19,804 - #26 =
INFO  01:58:19,804 - #10 new
INFO  01:58:19,804 - #45 Node
INFO  01:58:19,804 - #18 ;
INFO  01:58:19,804 - #45 left
INFO  01:58:19,804 - #20 .
INFO  01:58:19,804 - #45 val
INFO  01:58:19,804 - #26 =
INFO  01:58:19,804 - #45 v
INFO  01:58:19,804 - #18 ;
INFO  01:58:19,804 - #13 }
INFO  01:58:19,804 - #7 else
INFO  01:58:19,804 - #12 {
INFO  01:58:19,804 - #45 left
INFO  01:58:19,804 - #20 .
INFO  01:58:19,804 - #45 insrt
INFO  01:58:19,804 - #16 (
INFO  01:58:19,804 - #45 v
INFO  01:58:19,804 - #17 )
INFO  01:58:19,804 - #18 ;
INFO  01:58:19,804 - #13 }
INFO  01:58:19,804 - #13 }
INFO  01:58:19,805 - #13 }
INFO  01:58:19,805 - #13 }
INFO  01:58:19,805 - #13 }
INFO  01:58:19,805 - #45 PackedCharArray
INFO  01:58:19,805 - #45 ima
INFO  01:58:19,805 - #18 ;
INFO  01:58:19,805 - #45 PackedCharArray
INFO  01:58:19,805 - #45 nema
INFO  01:58:19,805 - #18 ;
INFO  01:58:19,805 - #6 enum
INFO  01:58:19,805 - #45 StringPicker
INFO  01:58:19,805 - #12 {
INFO  01:58:19,805 - #45 IMA
INFO  01:58:19,805 - #26 =
INFO  01:58:19,805 - #44 42
INFO  01:58:19,805 - #19 ,
INFO  01:58:19,805 - #45 NEMA
INFO  01:58:19,805 - #26 =
INFO  01:58:19,805 - #44 43
INFO  01:58:19,805 - #13 }
INFO  01:58:19,805 - #12 {
INFO  01:58:19,805 - #39 void
INFO  01:58:19,805 - #45 printstr
INFO  01:58:19,805 - #16 (
INFO  01:58:19,805 - #45 int
INFO  01:58:19,805 - #45 x
INFO  01:58:19,805 - #17 )
INFO  01:58:19,805 - #12 {
INFO  01:58:19,805 - #9 if
INFO  01:58:19,805 - #16 (
INFO  01:58:19,805 - #45 x
INFO  01:58:19,805 - #29 ==
INFO  01:58:19,805 - #44 42
INFO  01:58:19,805 - #35 &&
INFO  01:58:19,805 - #45 x
INFO  01:58:19,805 - #29 ==
INFO  01:58:19,805 - #45 StringPicker
INFO  01:58:19,805 - #20 .
INFO  01:58:19,805 - #45 IMA
INFO  01:58:19,805 - #17 )
INFO  01:58:19,806 - #45 util
INFO  01:58:19,806 - #20 .
INFO  01:58:19,806 - #45 printstr
INFO  01:58:19,806 - #16 (
INFO  01:58:19,806 - #45 ima
INFO  01:58:19,806 - #20 .
INFO  01:58:19,806 - #45 array
INFO  01:58:19,806 - #17 )
INFO  01:58:19,806 - #18 ;
INFO  01:58:19,806 - #9 if
INFO  01:58:19,806 - #16 (
INFO  01:58:19,806 - #45 x
INFO  01:58:19,806 - #29 ==
INFO  01:58:19,806 - #44 86
INFO  01:58:19,806 - #36 ||
INFO  01:58:19,806 - #45 x
INFO  01:58:19,806 - #29 ==
INFO  01:58:19,806 - #45 StringPicker
INFO  01:58:19,806 - #20 .
INFO  01:58:19,806 - #45 NEMA
INFO  01:58:19,806 - #17 )
INFO  01:58:19,806 - #45 util
INFO  01:58:19,806 - #20 .
INFO  01:58:19,806 - #45 printstr
INFO  01:58:19,806 - #16 (
INFO  01:58:19,806 - #45 nema
INFO  01:58:19,806 - #20 .
INFO  01:58:19,806 - #45 array
INFO  01:58:19,806 - #17 )
INFO  01:58:19,806 - #18 ;
INFO  01:58:19,806 - #13 }
INFO  01:58:19,806 - #39 void
INFO  01:58:19,806 - #45 printstrE
INFO  01:58:19,806 - #16 (
INFO  01:58:19,806 - #45 StringPicker
INFO  01:58:19,806 - #45 e
INFO  01:58:19,806 - #17 )
INFO  01:58:19,806 - #12 {
INFO  01:58:19,806 - #9 if
INFO  01:58:19,806 - #16 (
INFO  01:58:19,806 - #45 e
INFO  01:58:19,806 - #32 >=
INFO  01:58:19,806 - #44 42
INFO  01:58:19,807 - #35 &&
INFO  01:58:19,807 - #45 e
INFO  01:58:19,807 - #34 <=
INFO  01:58:19,807 - #44 43
INFO  01:58:19,807 - #17 )
INFO  01:58:19,807 - #45 printstr
INFO  01:58:19,807 - #16 (
INFO  01:58:19,807 - #45 e
INFO  01:58:19,807 - #17 )
INFO  01:58:19,807 - #18 ;
INFO  01:58:19,807 - #13 }
INFO  01:58:19,807 - #45 bool
INFO  01:58:19,807 - #45 find
INFO  01:58:19,807 - #16 (
INFO  01:58:19,807 - #45 Node
INFO  01:58:19,807 - #45 nd
INFO  01:58:19,807 - #19 ,
INFO  01:58:19,807 - #45 int
INFO  01:58:19,807 - #45 v
INFO  01:58:19,807 - #17 )
INFO  01:58:19,807 - #12 {
INFO  01:58:19,807 - #9 if
INFO  01:58:19,807 - #16 (
INFO  01:58:19,807 - #45 nd
INFO  01:58:19,807 - #30 !=
INFO  01:58:19,807 - #45 null
INFO  01:58:19,808 - #35 &&
INFO  01:58:19,808 - #45 nd
INFO  01:58:19,808 - #20 .
INFO  01:58:19,808 - #45 val
INFO  01:58:19,808 - #29 ==
INFO  01:58:19,808 - #45 v
INFO  01:58:19,808 - #17 )
INFO  01:58:19,808 - #38 return
INFO  01:58:19,808 - #47 true
INFO  01:58:19,808 - #18 ;
INFO  01:58:19,808 - #7 else
INFO  01:58:19,808 - #9 if
INFO  01:58:19,808 - #16 (
INFO  01:58:19,808 - #45 nd
INFO  01:58:19,808 - #30 !=
INFO  01:58:19,808 - #45 null
INFO  01:58:19,808 - #35 &&
INFO  01:58:19,808 - #45 nd
INFO  01:58:19,808 - #20 .
INFO  01:58:19,808 - #45 val
INFO  01:58:19,808 - #33 <
INFO  01:58:19,808 - #45 v
INFO  01:58:19,808 - #17 )
INFO  01:58:19,808 - #38 return
INFO  01:58:19,808 - #45 find
INFO  01:58:19,808 - #16 (
INFO  01:58:19,808 - #45 nd
INFO  01:58:19,808 - #20 .
INFO  01:58:19,808 - #45 right
INFO  01:58:19,808 - #19 ,
INFO  01:58:19,808 - #45 v
INFO  01:58:19,808 - #17 )
INFO  01:58:19,808 - #18 ;
INFO  01:58:19,808 - #7 else
INFO  01:58:19,808 - #9 if
INFO  01:58:19,808 - #16 (
INFO  01:58:19,808 - #45 nd
INFO  01:58:19,808 - #30 !=
INFO  01:58:19,808 - #45 null
INFO  01:58:19,808 - #35 &&
INFO  01:58:19,808 - #45 nd
INFO  01:58:19,808 - #20 .
INFO  01:58:19,808 - #45 val
INFO  01:58:19,808 - #31 >
INFO  01:58:19,808 - #45 v
INFO  01:58:19,808 - #17 )
INFO  01:58:19,808 - #12 {
INFO  01:58:19,808 - #38 return
INFO  01:58:19,808 - #45 find
INFO  01:58:19,808 - #16 (
INFO  01:58:19,808 - #45 nd
INFO  01:58:19,808 - #20 .
INFO  01:58:19,808 - #45 left
INFO  01:58:19,808 - #19 ,
INFO  01:58:19,809 - #45 v
INFO  01:58:19,809 - #17 )
INFO  01:58:19,809 - #18 ;
INFO  01:58:19,809 - #13 }
INFO  01:58:19,809 - #7 else
INFO  01:58:19,809 - #38 return
INFO  01:58:19,809 - #47 false
INFO  01:58:19,809 - #18 ;
INFO  01:58:19,809 - #13 }
INFO  01:58:19,809 - #45 PackedCharArray
INFO  01:58:19,809 - #45 getInitialMessage
INFO  01:58:19,809 - #16 (
INFO  01:58:19,809 - #17 )
INFO  01:58:19,809 - #45 PackedCharArray
INFO  01:58:19,809 - #45 pca
INFO  01:58:19,809 - #18 ;
INFO  01:58:19,809 - #45 char
INFO  01:58:19,809 - #45 chr
INFO  01:58:19,809 - #14 [
INFO  01:58:19,809 - #15 ]
INFO  01:58:19,809 - #18 ;
INFO  01:58:19,809 - #12 {
INFO  01:58:19,809 - #45 chr
INFO  01:58:19,809 - #26 =
INFO  01:58:19,809 - #10 new
INFO  01:58:19,809 - #45 char
INFO  01:58:19,809 - #14 [
INFO  01:58:19,809 - #44 80
INFO  01:58:19,809 - #15 ]
INFO  01:58:19,809 - #18 ;
INFO  01:58:19,809 - #45 A
INFO  01:58:19,809 - #45 chr
ERROR 01:58:19,809 - 
Sintaksna greska na liniji 204
ERROR 01:58:19,809 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 204
