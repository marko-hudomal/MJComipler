program P

const int size = 10;
const char k='a';
int a,b,c;
char e,f;
bool g;

enum Num { ZERO, ONE, TEN = 10 }

interface I{
	int getp(int i);
	int getn(int i);
}

class Table implements I{
	int pos[], neg[];
	{
		void putp (int a, int idx) { pos[idx]=a; }
		void putn (int a, int idx) { neg[idx]=-a; }
		int getp (int idx) { return pos[idx]; }
		int getn (int idx) { return neg[idx]; }
	}
}
Table val;
 
{
		char funkc(int a, char b, bool c)
		char x;
	{
	 	print(a);
	 	print(eol);
	 	print(b);
	 	print(eol);
	 	
	 	x='A';
	 	if (c && b=='#' && a<10){
	 		x='B';
	 	}else
	 		x='C';
	 	
		return x;
	}

	void main() 
	int x, i; char c;
	{
		// Initialize val
		val = new Table;
		val.pos = new int [size];
		val.neg = new int [size];
		for (i = 1; i<=size; i++)
		{
			val.putp(i*100,i);
			val.putn(i*100,i);
		}
		print(funkc(1,'#',true));
		
		// Read values
		read(x);
		for (;;)
		{
			if (Num.ZERO <= x && x < size)
			{
				val.putp(val.getp(x)+Num.ONE,0);
			} else
			if (-size < x && x < 0)
			{
				val.putn(val.getn(-x)+1,0);
			}
			read(x);
		}
	}
}