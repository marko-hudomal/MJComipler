INFO  02:40:30,169 - Putanja iz argumenta: test/program.mj
INFO  02:40:30,170 - Compiling source file: D:\ETF\PP1\Projekat\workspace\MJCompiler\test\program.mj
INFO  02:40:30,205 - #2 program
INFO  02:40:30,205 - #45 P
INFO  02:40:30,205 - #8 const
INFO  02:40:30,206 - #45 int
INFO  02:40:30,206 - #45 size
INFO  02:40:30,206 - #26 =
INFO  02:40:30,207 - #44 10
INFO  02:40:30,207 - #18 ;
INFO  02:40:30,207 - #45 int
INFO  02:40:30,207 - #45 a
INFO  02:40:30,208 - #19 ,
INFO  02:40:30,208 - #45 b
INFO  02:40:30,208 - #19 ,
INFO  02:40:30,208 - #45 d
INFO  02:40:30,208 - #18 ;
INFO  02:40:30,208 - #6 enum
INFO  02:40:30,209 - #45 Num
INFO  02:40:30,209 - #12 {
INFO  02:40:30,209 - #45 ZERO
INFO  02:40:30,209 - #19 ,
INFO  02:40:30,209 - #45 ONE
INFO  02:40:30,209 - #19 ,
INFO  02:40:30,209 - #45 TEN
INFO  02:40:30,210 - #26 =
INFO  02:40:30,210 - #44 10
INFO  02:40:30,210 - #13 }
INFO  02:40:30,210 - #5 interface
INFO  02:40:30,210 - #45 I
INFO  02:40:30,210 - #12 {
INFO  02:40:30,210 - #13 }
INFO  02:40:30,211 - #4 class
INFO  02:40:30,211 - #45 Table
INFO  02:40:30,211 - #42 implements
INFO  02:40:30,211 - #45 I
INFO  02:40:30,211 - #12 {
INFO  02:40:30,212 - #45 int
INFO  02:40:30,212 - #45 pos
INFO  02:40:30,212 - #14 [
INFO  02:40:30,212 - #15 ]
INFO  02:40:30,212 - #19 ,
INFO  02:40:30,212 - #45 neg
INFO  02:40:30,213 - #14 [
INFO  02:40:30,213 - #15 ]
INFO  02:40:30,213 - #18 ;
INFO  02:40:30,213 - #12 {
INFO  02:40:30,213 - #45 int
INFO  02:40:30,213 - #45 getp
INFO  02:40:30,214 - #16 (
INFO  02:40:30,214 - #45 int
INFO  02:40:30,214 - #45 idx
INFO  02:40:30,214 - #17 )
INFO  02:40:30,214 - #12 {
INFO  02:40:30,214 - #38 return
INFO  02:40:30,215 - #45 pos
INFO  02:40:30,215 - #14 [
INFO  02:40:30,215 - #45 idx
INFO  02:40:30,215 - #15 ]
INFO  02:40:30,216 - #18 ;
INFO  02:40:30,216 - #13 }
INFO  02:40:30,216 - #45 int
INFO  02:40:30,217 - #45 getn
INFO  02:40:30,217 - #16 (
INFO  02:40:30,217 - #45 int
INFO  02:40:30,217 - #45 idx
INFO  02:40:30,217 - #17 )
INFO  02:40:30,217 - #12 {
INFO  02:40:30,217 - #38 return
INFO  02:40:30,217 - #45 neg
INFO  02:40:30,217 - #14 [
INFO  02:40:30,217 - #45 idx
INFO  02:40:30,217 - #15 ]
INFO  02:40:30,217 - #18 ;
INFO  02:40:30,217 - #13 }
INFO  02:40:30,217 - #13 }
INFO  02:40:30,217 - #13 }
INFO  02:40:30,217 - #45 Table
INFO  02:40:30,218 - #45 val
INFO  02:40:30,218 - #18 ;
INFO  02:40:30,218 - #45 int
INFO  02:40:30,218 - #45 a
INFO  02:40:30,218 - #19 ,
INFO  02:40:30,218 - #45 b
INFO  02:40:30,218 - #19 ,
INFO  02:40:30,218 - #45 c
INFO  02:40:30,218 - #18 ;
INFO  02:40:30,218 - #12 {
INFO  02:40:30,218 - #39 void
INFO  02:40:30,218 - #45 f
INFO  02:40:30,219 - #16 (
INFO  02:40:30,219 - #45 char
INFO  02:40:30,219 - #45 ch
INFO  02:40:30,219 - #19 ,
INFO  02:40:30,219 - #45 int
INFO  02:40:30,219 - #45 a
INFO  02:40:30,219 - #19 ,
INFO  02:40:30,219 - #45 int
INFO  02:40:30,219 - #45 arg
INFO  02:40:30,219 - #17 )
INFO  02:40:30,219 - #45 int
INFO  02:40:30,219 - #45 x
INFO  02:40:30,219 - #18 ;
INFO  02:40:30,219 - #12 {
INFO  02:40:30,220 - #45 x
INFO  02:40:30,220 - #26 =
INFO  02:40:30,220 - #44 5
INFO  02:40:30,220 - #18 ;
INFO  02:40:30,220 - #45 a
INFO  02:40:30,220 - #26 =
INFO  02:40:30,221 - #46 a
INFO  02:40:30,221 - #18 ;
INFO  02:40:30,221 - #45 b
INFO  02:40:30,221 - #26 =
INFO  02:40:30,221 - #46 4
INFO  02:40:30,221 - #18 ;
INFO  02:40:30,221 - #45 c
INFO  02:40:30,221 - #26 =
INFO  02:40:30,221 - #46 !
INFO  02:40:30,221 - #18 ;
INFO  02:40:30,221 - #13 }
INFO  02:40:30,221 - #39 void
INFO  02:40:30,221 - #45 main
INFO  02:40:30,221 - #16 (
INFO  02:40:30,221 - #17 )
INFO  02:40:30,222 - #45 int
INFO  02:40:30,222 - #45 x
INFO  02:40:30,222 - #19 ,
INFO  02:40:30,222 - #45 i
INFO  02:40:30,222 - #18 ;
INFO  02:40:30,222 - #45 char
INFO  02:40:30,222 - #45 c
INFO  02:40:30,222 - #18 ;
INFO  02:40:30,223 - #12 {
INFO  02:40:30,223 - #45 val
INFO  02:40:30,223 - #26 =
INFO  02:40:30,223 - #10 new
INFO  02:40:30,224 - #45 Table
INFO  02:40:30,224 - #18 ;
INFO  02:40:30,224 - #45 val
INFO  02:40:30,224 - #20 .
INFO  02:40:30,224 - #45 pos
INFO  02:40:30,224 - #26 =
INFO  02:40:30,224 - #10 new
INFO  02:40:30,224 - #45 int
INFO  02:40:30,224 - #14 [
INFO  02:40:30,224 - #45 size
INFO  02:40:30,224 - #15 ]
INFO  02:40:30,224 - #18 ;
INFO  02:40:30,225 - #45 val
INFO  02:40:30,225 - #20 .
INFO  02:40:30,225 - #45 neg
INFO  02:40:30,225 - #26 =
INFO  02:40:30,225 - #10 new
INFO  02:40:30,225 - #45 int
INFO  02:40:30,225 - #14 [
INFO  02:40:30,225 - #45 size
INFO  02:40:30,225 - #15 ]
INFO  02:40:30,225 - #18 ;
INFO  02:40:30,225 - #40 for
INFO  02:40:30,225 - #16 (
INFO  02:40:30,225 - #45 i
INFO  02:40:30,225 - #26 =
INFO  02:40:30,225 - #44 0
INFO  02:40:30,225 - #18 ;
INFO  02:40:30,225 - #45 i
INFO  02:40:30,226 - #33 <
INFO  02:40:30,226 - #45 size
INFO  02:40:30,226 - #18 ;
INFO  02:40:30,227 - #45 i
INFO  02:40:30,227 - #27 ++
INFO  02:40:30,227 - #17 )
INFO  02:40:30,228 - #12 {
INFO  02:40:30,228 - #45 val
INFO  02:40:30,228 - #20 .
INFO  02:40:30,228 - #45 putp
INFO  02:40:30,228 - #16 (
INFO  02:40:30,228 - #44 0
INFO  02:40:30,228 - #19 ,
INFO  02:40:30,228 - #45 i
INFO  02:40:30,228 - #17 )
INFO  02:40:30,228 - #18 ;
INFO  02:40:30,228 - #45 val
INFO  02:40:30,228 - #20 .
INFO  02:40:30,228 - #45 putn
INFO  02:40:30,228 - #16 (
INFO  02:40:30,228 - #44 0
INFO  02:40:30,228 - #19 ,
INFO  02:40:30,228 - #45 i
INFO  02:40:30,229 - #17 )
INFO  02:40:30,229 - #18 ;
INFO  02:40:30,229 - #13 }
INFO  02:40:30,229 - #45 f
INFO  02:40:30,229 - #16 (
INFO  02:40:30,229 - #45 c
INFO  02:40:30,229 - #19 ,
INFO  02:40:30,229 - #45 x
INFO  02:40:30,229 - #19 ,
INFO  02:40:30,229 - #45 i
INFO  02:40:30,229 - #17 )
INFO  02:40:30,229 - #18 ;
INFO  02:40:30,229 - #37 read
INFO  02:40:30,229 - #16 (
INFO  02:40:30,229 - #45 x
INFO  02:40:30,229 - #17 )
INFO  02:40:30,229 - #18 ;
INFO  02:40:30,229 - #40 for
INFO  02:40:30,229 - #16 (
INFO  02:40:30,229 - #18 ;
INFO  02:40:30,229 - #45 x
INFO  02:40:30,229 - #31 >
INFO  02:40:30,230 - #44 0
INFO  02:40:30,230 - #18 ;
INFO  02:40:30,230 - #17 )
INFO  02:40:30,230 - #12 {
INFO  02:40:30,230 - #9 if
INFO  02:40:30,230 - #16 (
INFO  02:40:30,230 - #45 Num
INFO  02:40:30,230 - #20 .
INFO  02:40:30,230 - #45 ZERO
INFO  02:40:30,230 - #34 <=
INFO  02:40:30,230 - #45 x
INFO  02:40:30,230 - #35 &&
INFO  02:40:30,230 - #45 x
INFO  02:40:30,230 - #33 <
INFO  02:40:30,230 - #45 size
INFO  02:40:30,230 - #17 )
INFO  02:40:30,231 - #12 {
INFO  02:40:30,231 - #45 val
INFO  02:40:30,231 - #20 .
INFO  02:40:30,231 - #45 putp
INFO  02:40:30,231 - #16 (
INFO  02:40:30,231 - #45 val
INFO  02:40:30,231 - #20 .
INFO  02:40:30,231 - #45 getp
INFO  02:40:30,231 - #16 (
INFO  02:40:30,231 - #45 x
INFO  02:40:30,231 - #17 )
INFO  02:40:30,231 - #21 +
INFO  02:40:30,231 - #45 Num
INFO  02:40:30,231 - #20 .
INFO  02:40:30,231 - #45 ONE
INFO  02:40:30,231 - #17 )
INFO  02:40:30,232 - #18 ;
INFO  02:40:30,232 - #13 }
INFO  02:40:30,232 - #7 else
INFO  02:40:30,232 - #9 if
INFO  02:40:30,232 - #16 (
INFO  02:40:30,232 - #22 -
INFO  02:40:30,232 - #45 size
INFO  02:40:30,232 - #33 <
INFO  02:40:30,232 - #45 x
INFO  02:40:30,232 - #35 &&
INFO  02:40:30,232 - #45 x
INFO  02:40:30,232 - #33 <
INFO  02:40:30,232 - #44 0
INFO  02:40:30,234 - #17 )
INFO  02:40:30,234 - #12 {
INFO  02:40:30,234 - #45 val
INFO  02:40:30,234 - #20 .
INFO  02:40:30,234 - #45 putn
INFO  02:40:30,234 - #16 (
INFO  02:40:30,234 - #45 val
INFO  02:40:30,234 - #20 .
INFO  02:40:30,234 - #45 getn
INFO  02:40:30,234 - #16 (
INFO  02:40:30,234 - #22 -
INFO  02:40:30,234 - #45 x
INFO  02:40:30,234 - #17 )
INFO  02:40:30,234 - #21 +
INFO  02:40:30,234 - #44 1
INFO  02:40:30,234 - #17 )
INFO  02:40:30,234 - #18 ;
INFO  02:40:30,234 - #13 }
INFO  02:40:30,234 - #37 read
INFO  02:40:30,235 - #16 (
INFO  02:40:30,235 - #45 x
INFO  02:40:30,235 - #17 )
INFO  02:40:30,235 - #18 ;
INFO  02:40:30,235 - #13 }
INFO  02:40:30,235 - #13 }
INFO  02:40:30,235 - #13 }
INFO  02:40:30,242 - Program(
  ProgName(
   P
  ) [ProgName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              Declarations(
                NoDecl(
                ) [NoDecl]
                ConstDeclaration(
                  ConstDeclNode(
                    ConstDeclType(
                      TypeNode(
                       int
                      ) [TypeNode]
                    ) [ConstDeclType]
                    SingleConstant(
                      IdentEqualConstantNode(
                       size
                        NumberNode(
                         10
                        ) [NumberNode]
                      ) [IdentEqualConstantNode]
                    ) [SingleConstant]
                  ) [ConstDeclNode]
                ) [ConstDeclaration]
              ) [Declarations]
              VarDeclaration(
                GlobalVarDeclNode(
                  VarDeclType(
                    TypeNode(
                     int
                    ) [TypeNode]
                  ) [VarDeclType]
                  Variables(
                    Variables(
                      SingleVariable(
                        VariableNoBracket(
                         a
                        ) [VariableNoBracket]
                      ) [SingleVariable]
                      VariableNoBracket(
                       b
                      ) [VariableNoBracket]
                    ) [Variables]
                    VariableNoBracket(
                     d
                    ) [VariableNoBracket]
                  ) [Variables]
                ) [GlobalVarDeclNode]
              ) [VarDeclaration]
            ) [Declarations]
            EnumDeclaration(
              EnumDeclarationNode(
                EnumIdent(
                 Num
                ) [EnumIdent]
                Enumerations(
                  Enumerations(
                    SingleEnumeration(
                      EnumerationNoVal(
                       ZERO
                      ) [EnumerationNoVal]
                    ) [SingleEnumeration]
                    EnumerationNoVal(
                     ONE
                    ) [EnumerationNoVal]
                  ) [Enumerations]
                  EnumerationVal(
                   TEN
                   10
                  ) [EnumerationVal]
                ) [Enumerations]
              ) [EnumDeclarationNode]
            ) [EnumDeclaration]
          ) [Declarations]
          InterfaceDeclaration(
            InterfaceDeclarationNode(
              InterfaceIdent(
               I
              ) [InterfaceIdent]
              NoInterfaceMethodDeclaration(
              ) [NoInterfaceMethodDeclaration]
            ) [InterfaceDeclarationNode]
          ) [InterfaceDeclaration]
        ) [Declarations]
        ClassDeclaration(
          ClassDeclarationWithMethods(
            ClassDeclIdent(
             Table
            ) [ClassDeclIdent]
            NoExtension(
            ) [NoExtension]
            Implementation(
              SinglType(
                TypeNode(
                 I
                ) [TypeNode]
              ) [SinglType]
            ) [Implementation]
            ClassVarDeclarationList(
              NoClassVarDeclaration(
              ) [NoClassVarDeclaration]
              ClassVarDeclNode(
                ClassVarDeclType(
                  TypeNode(
                   int
                  ) [TypeNode]
                ) [ClassVarDeclType]
                ClassVariables(
                  SingleClassVariable(
                    VariableBracket(
                     pos
                    ) [VariableBracket]
                  ) [SingleClassVariable]
                  VariableBracket(
                   neg
                  ) [VariableBracket]
                ) [ClassVariables]
              ) [ClassVarDeclNode]
            ) [ClassVarDeclarationList]
            ClassMethodDeclarations(
              ClassMethodDeclarations(
                NoClassMethodDecl(
                ) [NoClassMethodDecl]
                MethodDecl(
                  MethodTypeName(
                    NoVoidType(
                      TypeNode(
                       int
                      ) [TypeNode]
                    ) [NoVoidType]
                   getp
                  ) [MethodTypeName]
                  FormalParams(
                    SingleFormalParamDecl(
                      FormalParamDeclarationNoBrackets(
                        TypeNode(
                         int
                        ) [TypeNode]
                       idx
                      ) [FormalParamDeclarationNoBrackets]
                    ) [SingleFormalParamDecl]
                  ) [FormalParams]
                  NoVarDeclaration(
                  ) [NoVarDeclaration]
                  MethodLBRACE(
                  ) [MethodLBRACE]
                  Statements(
                    NoStatement(
                    ) [NoStatement]
                    ReturnStatementExpr(
                      SingleExpression(
                        TermFactor(
                          DesignatorEmpty(
                            DesignatorNode(
                              Exprs(
                                IdentExprListArray(
                                  SingleIdentExpr(
                                   pos
                                  ) [SingleIdentExpr]
                                ) [IdentExprListArray]
                                SingleExpression(
                                  TermFactor(
                                    DesignatorEmpty(
                                      DesignatorNode(
                                        SingleIdentExpr(
                                         idx
                                        ) [SingleIdentExpr]
                                      ) [DesignatorNode]
                                    ) [DesignatorEmpty]
                                  ) [TermFactor]
                                ) [SingleExpression]
                              ) [Exprs]
                            ) [DesignatorNode]
                          ) [DesignatorEmpty]
                        ) [TermFactor]
                      ) [SingleExpression]
                    ) [ReturnStatementExpr]
                  ) [Statements]
                ) [MethodDecl]
              ) [ClassMethodDeclarations]
              MethodDecl(
                MethodTypeName(
                  NoVoidType(
                    TypeNode(
                     int
                    ) [TypeNode]
                  ) [NoVoidType]
                 getn
                ) [MethodTypeName]
                FormalParams(
                  SingleFormalParamDecl(
                    FormalParamDeclarationNoBrackets(
                      TypeNode(
                       int
                      ) [TypeNode]
                     idx
                    ) [FormalParamDeclarationNoBrackets]
                  ) [SingleFormalParamDecl]
                ) [FormalParams]
                NoVarDeclaration(
                ) [NoVarDeclaration]
                MethodLBRACE(
                ) [MethodLBRACE]
                Statements(
                  NoStatement(
                  ) [NoStatement]
                  ReturnStatementExpr(
                    SingleExpression(
                      TermFactor(
                        DesignatorEmpty(
                          DesignatorNode(
                            Exprs(
                              IdentExprListArray(
                                SingleIdentExpr(
                                 neg
                                ) [SingleIdentExpr]
                              ) [IdentExprListArray]
                              SingleExpression(
                                TermFactor(
                                  DesignatorEmpty(
                                    DesignatorNode(
                                      SingleIdentExpr(
                                       idx
                                      ) [SingleIdentExpr]
                                    ) [DesignatorNode]
                                  ) [DesignatorEmpty]
                                ) [TermFactor]
                              ) [SingleExpression]
                            ) [Exprs]
                          ) [DesignatorNode]
                        ) [DesignatorEmpty]
                      ) [TermFactor]
                    ) [SingleExpression]
                  ) [ReturnStatementExpr]
                ) [Statements]
              ) [MethodDecl]
            ) [ClassMethodDeclarations]
          ) [ClassDeclarationWithMethods]
        ) [ClassDeclaration]
      ) [Declarations]
      VarDeclaration(
        GlobalVarDeclNode(
          VarDeclType(
            TypeNode(
             Table
            ) [TypeNode]
          ) [VarDeclType]
          SingleVariable(
            VariableNoBracket(
             val
            ) [VariableNoBracket]
          ) [SingleVariable]
        ) [GlobalVarDeclNode]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      GlobalVarDeclNode(
        VarDeclType(
          TypeNode(
           int
          ) [TypeNode]
        ) [VarDeclType]
        Variables(
          Variables(
            SingleVariable(
              VariableNoBracket(
               a
              ) [VariableNoBracket]
            ) [SingleVariable]
            VariableNoBracket(
             b
            ) [VariableNoBracket]
          ) [Variables]
          VariableNoBracket(
           c
          ) [VariableNoBracket]
        ) [Variables]
      ) [GlobalVarDeclNode]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        MethodTypeName(
          VoidType(
          ) [VoidType]
         f
        ) [MethodTypeName]
        FormalParams(
          FormalParamDecls(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclarationNoBrackets(
                  TypeNode(
                   char
                  ) [TypeNode]
                 ch
                ) [FormalParamDeclarationNoBrackets]
              ) [SingleFormalParamDecl]
              FormalParamDeclarationNoBrackets(
                TypeNode(
                 int
                ) [TypeNode]
               a
              ) [FormalParamDeclarationNoBrackets]
            ) [FormalParamDecls]
            FormalParamDeclarationNoBrackets(
              TypeNode(
               int
              ) [TypeNode]
             arg
            ) [FormalParamDeclarationNoBrackets]
          ) [FormalParamDecls]
        ) [FormalParams]
        VarDeclarationList(
          NoVarDeclaration(
          ) [NoVarDeclaration]
          VarDeclNode(
            VarDeclType(
              TypeNode(
               int
              ) [TypeNode]
            ) [VarDeclType]
            SingleVariable(
              VariableNoBracket(
               x
              ) [VariableNoBracket]
            ) [SingleVariable]
          ) [VarDeclNode]
        ) [VarDeclarationList]
        MethodLBRACE(
        ) [MethodLBRACE]
        Statements(
          Statements(
            Statements(
              Statements(
                NoStatement(
                ) [NoStatement]
                DesignatorStatementOnly(
                  DesignatorStatementAssignop(
                    DesignatorNode(
                      SingleIdentExpr(
                       x
                      ) [SingleIdentExpr]
                    ) [DesignatorNode]
                    Assignop(
                    ) [Assignop]
                    SingleExpression(
                      TermFactor(
                        ConstantNumber(
                         5
                        ) [ConstantNumber]
                      ) [TermFactor]
                    ) [SingleExpression]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementOnly]
              ) [Statements]
              DesignatorStatementOnly(
                DesignatorStatementAssignop(
                  DesignatorNode(
                    SingleIdentExpr(
                     a
                    ) [SingleIdentExpr]
                  ) [DesignatorNode]
                  Assignop(
                  ) [Assignop]
                  SingleExpression(
                    TermFactor(
                      ConstantCharacter(
                       a
                      ) [ConstantCharacter]
                    ) [TermFactor]
                  ) [SingleExpression]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementOnly]
            ) [Statements]
            DesignatorStatementOnly(
              DesignatorStatementAssignop(
                DesignatorNode(
                  SingleIdentExpr(
                   b
                  ) [SingleIdentExpr]
                ) [DesignatorNode]
                Assignop(
                ) [Assignop]
                SingleExpression(
                  TermFactor(
                    ConstantCharacter(
                     4
                    ) [ConstantCharacter]
                  ) [TermFactor]
                ) [SingleExpression]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementOnly]
          ) [Statements]
          DesignatorStatementOnly(
            DesignatorStatementAssignop(
              DesignatorNode(
                SingleIdentExpr(
                 c
                ) [SingleIdentExpr]
              ) [DesignatorNode]
              Assignop(
              ) [Assignop]
              SingleExpression(
                TermFactor(
                  ConstantCharacter(
                   !
                  ) [ConstantCharacter]
                ) [TermFactor]
              ) [SingleExpression]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementOnly]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      MethodTypeName(
        VoidType(
        ) [VoidType]
       main
      ) [MethodTypeName]
      NoFormalParam(
      ) [NoFormalParam]
      VarDeclarationList(
        VarDeclarationList(
          NoVarDeclaration(
          ) [NoVarDeclaration]
          VarDeclNode(
            VarDeclType(
              TypeNode(
               int
              ) [TypeNode]
            ) [VarDeclType]
            Variables(
              SingleVariable(
                VariableNoBracket(
                 x
                ) [VariableNoBracket]
              ) [SingleVariable]
              VariableNoBracket(
               i
              ) [VariableNoBracket]
            ) [Variables]
          ) [VarDeclNode]
        ) [VarDeclarationList]
        VarDeclNode(
          VarDeclType(
            TypeNode(
             char
            ) [TypeNode]
          ) [VarDeclType]
          SingleVariable(
            VariableNoBracket(
             c
            ) [VariableNoBracket]
          ) [SingleVariable]
        ) [VarDeclNode]
      ) [VarDeclarationList]
      MethodLBRACE(
      ) [MethodLBRACE]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    NoStatement(
                    ) [NoStatement]
                    DesignatorStatementOnly(
                      DesignatorStatementAssignop(
                        DesignatorNode(
                          SingleIdentExpr(
                           val
                          ) [SingleIdentExpr]
                        ) [DesignatorNode]
                        Assignop(
                        ) [Assignop]
                        SingleExpression(
                          TermFactor(
                            NewType(
                              TypeNode(
                               Table
                              ) [TypeNode]
                            ) [NewType]
                          ) [TermFactor]
                        ) [SingleExpression]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementOnly]
                  ) [Statements]
                  DesignatorStatementOnly(
                    DesignatorStatementAssignop(
                      DesignatorNode(
                        Idents(
                          SingleIdentExpr(
                           val
                          ) [SingleIdentExpr]
                         pos
                        ) [Idents]
                      ) [DesignatorNode]
                      Assignop(
                      ) [Assignop]
                      SingleExpression(
                        TermFactor(
                          NewArray(
                            NewArrayType(
                              TypeNode(
                               int
                              ) [TypeNode]
                            ) [NewArrayType]
                            SingleExpression(
                              TermFactor(
                                DesignatorEmpty(
                                  DesignatorNode(
                                    SingleIdentExpr(
                                     size
                                    ) [SingleIdentExpr]
                                  ) [DesignatorNode]
                                ) [DesignatorEmpty]
                              ) [TermFactor]
                            ) [SingleExpression]
                          ) [NewArray]
                        ) [TermFactor]
                      ) [SingleExpression]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementOnly]
                ) [Statements]
                DesignatorStatementOnly(
                  DesignatorStatementAssignop(
                    DesignatorNode(
                      Idents(
                        SingleIdentExpr(
                         val
                        ) [SingleIdentExpr]
                       neg
                      ) [Idents]
                    ) [DesignatorNode]
                    Assignop(
                    ) [Assignop]
                    SingleExpression(
                      TermFactor(
                        NewArray(
                          NewArrayType(
                            TypeNode(
                             int
                            ) [TypeNode]
                          ) [NewArrayType]
                          SingleExpression(
                            TermFactor(
                              DesignatorEmpty(
                                DesignatorNode(
                                  SingleIdentExpr(
                                   size
                                  ) [SingleIdentExpr]
                                ) [DesignatorNode]
                              ) [DesignatorEmpty]
                            ) [TermFactor]
                          ) [SingleExpression]
                        ) [NewArray]
                      ) [TermFactor]
                    ) [SingleExpression]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementOnly]
              ) [Statements]
              ForStatement(
                ForHeader(
                  ForStatement1(
                    DesignatorStatementNotNull(
                      DesignatorStatementAssignop(
                        DesignatorNode(
                          SingleIdentExpr(
                           i
                          ) [SingleIdentExpr]
                        ) [DesignatorNode]
                        Assignop(
                        ) [Assignop]
                        SingleExpression(
                          TermFactor(
                            ConstantNumber(
                             0
                            ) [ConstantNumber]
                          ) [TermFactor]
                        ) [SingleExpression]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementNotNull]
                  ) [ForStatement1]
                  ForCondition(
                    ConditionNotNull(
                      ConditionNode(
                        SingleConditionTerm(
                          ConditionTermNode(
                            SingleConditionFact(
                              CondFactExpressionRelopExpression(
                                SingleExpression(
                                  TermFactor(
                                    DesignatorEmpty(
                                      DesignatorNode(
                                        SingleIdentExpr(
                                         i
                                        ) [SingleIdentExpr]
                                      ) [DesignatorNode]
                                    ) [DesignatorEmpty]
                                  ) [TermFactor]
                                ) [SingleExpression]
                                RelopLess(
                                ) [RelopLess]
                                SingleExpression(
                                  TermFactor(
                                    DesignatorEmpty(
                                      DesignatorNode(
                                        SingleIdentExpr(
                                         size
                                        ) [SingleIdentExpr]
                                      ) [DesignatorNode]
                                    ) [DesignatorEmpty]
                                  ) [TermFactor]
                                ) [SingleExpression]
                              ) [CondFactExpressionRelopExpression]
                            ) [SingleConditionFact]
                          ) [ConditionTermNode]
                        ) [SingleConditionTerm]
                      ) [ConditionNode]
                    ) [ConditionNotNull]
                  ) [ForCondition]
                  ForStatement2(
                    DesignatorStatementNotNull(
                      DesignatorStatementPlusPlus(
                        DesignatorNode(
                          SingleIdentExpr(
                           i
                          ) [SingleIdentExpr]
                        ) [DesignatorNode]
                      ) [DesignatorStatementPlusPlus]
                    ) [DesignatorStatementNotNull]
                  ) [ForStatement2]
                ) [ForHeader]
                InBraceStatement(
                  Statements(
                    Statements(
                      NoStatement(
                      ) [NoStatement]
                      DesignatorStatementOnly(
                        DesignatorStatementActPars(
                          DesignatorNode(
                            Idents(
                              SingleIdentExpr(
                               val
                              ) [SingleIdentExpr]
                             putp
                            ) [Idents]
                          ) [DesignatorNode]
                          ActParsNode(
                            ActualParametres(
                              SingleActualParam(
                                SingleExpression(
                                  TermFactor(
                                    ConstantNumber(
                                     0
                                    ) [ConstantNumber]
                                  ) [TermFactor]
                                ) [SingleExpression]
                              ) [SingleActualParam]
                              SingleExpression(
                                TermFactor(
                                  DesignatorEmpty(
                                    DesignatorNode(
                                      SingleIdentExpr(
                                       i
                                      ) [SingleIdentExpr]
                                    ) [DesignatorNode]
                                  ) [DesignatorEmpty]
                                ) [TermFactor]
                              ) [SingleExpression]
                            ) [ActualParametres]
                          ) [ActParsNode]
                        ) [DesignatorStatementActPars]
                      ) [DesignatorStatementOnly]
                    ) [Statements]
                    DesignatorStatementOnly(
                      DesignatorStatementActPars(
                        DesignatorNode(
                          Idents(
                            SingleIdentExpr(
                             val
                            ) [SingleIdentExpr]
                           putn
                          ) [Idents]
                        ) [DesignatorNode]
                        ActParsNode(
                          ActualParametres(
                            SingleActualParam(
                              SingleExpression(
                                TermFactor(
                                  ConstantNumber(
                                   0
                                  ) [ConstantNumber]
                                ) [TermFactor]
                              ) [SingleExpression]
                            ) [SingleActualParam]
                            SingleExpression(
                              TermFactor(
                                DesignatorEmpty(
                                  DesignatorNode(
                                    SingleIdentExpr(
                                     i
                                    ) [SingleIdentExpr]
                                  ) [DesignatorNode]
                                ) [DesignatorEmpty]
                              ) [TermFactor]
                            ) [SingleExpression]
                          ) [ActualParametres]
                        ) [ActParsNode]
                      ) [DesignatorStatementActPars]
                    ) [DesignatorStatementOnly]
                  ) [Statements]
                ) [InBraceStatement]
              ) [ForStatement]
            ) [Statements]
            DesignatorStatementOnly(
              DesignatorStatementActPars(
                DesignatorNode(
                  SingleIdentExpr(
                   f
                  ) [SingleIdentExpr]
                ) [DesignatorNode]
                ActParsNode(
                  ActualParametres(
                    ActualParametres(
                      SingleActualParam(
                        SingleExpression(
                          TermFactor(
                            DesignatorEmpty(
                              DesignatorNode(
                                SingleIdentExpr(
                                 c
                                ) [SingleIdentExpr]
                              ) [DesignatorNode]
                            ) [DesignatorEmpty]
                          ) [TermFactor]
                        ) [SingleExpression]
                      ) [SingleActualParam]
                      SingleExpression(
                        TermFactor(
                          DesignatorEmpty(
                            DesignatorNode(
                              SingleIdentExpr(
                               x
                              ) [SingleIdentExpr]
                            ) [DesignatorNode]
                          ) [DesignatorEmpty]
                        ) [TermFactor]
                      ) [SingleExpression]
                    ) [ActualParametres]
                    SingleExpression(
                      TermFactor(
                        DesignatorEmpty(
                          DesignatorNode(
                            SingleIdentExpr(
                             i
                            ) [SingleIdentExpr]
                          ) [DesignatorNode]
                        ) [DesignatorEmpty]
                      ) [TermFactor]
                    ) [SingleExpression]
                  ) [ActualParametres]
                ) [ActParsNode]
              ) [DesignatorStatementActPars]
            ) [DesignatorStatementOnly]
          ) [Statements]
          ReadStatement(
            DesignatorNode(
              SingleIdentExpr(
               x
              ) [SingleIdentExpr]
            ) [DesignatorNode]
          ) [ReadStatement]
        ) [Statements]
        ForStatement(
          ForHeader(
            ForStatement1(
              DesignatorStatementNull(
              ) [DesignatorStatementNull]
            ) [ForStatement1]
            ForCondition(
              ConditionNotNull(
                ConditionNode(
                  SingleConditionTerm(
                    ConditionTermNode(
                      SingleConditionFact(
                        CondFactExpressionRelopExpression(
                          SingleExpression(
                            TermFactor(
                              DesignatorEmpty(
                                DesignatorNode(
                                  SingleIdentExpr(
                                   x
                                  ) [SingleIdentExpr]
                                ) [DesignatorNode]
                              ) [DesignatorEmpty]
                            ) [TermFactor]
                          ) [SingleExpression]
                          RelopGreater(
                          ) [RelopGreater]
                          SingleExpression(
                            TermFactor(
                              ConstantNumber(
                               0
                              ) [ConstantNumber]
                            ) [TermFactor]
                          ) [SingleExpression]
                        ) [CondFactExpressionRelopExpression]
                      ) [SingleConditionFact]
                    ) [ConditionTermNode]
                  ) [SingleConditionTerm]
                ) [ConditionNode]
              ) [ConditionNotNull]
            ) [ForCondition]
            ForStatement2(
              DesignatorStatementNull(
              ) [DesignatorStatementNull]
            ) [ForStatement2]
          ) [ForHeader]
          InBraceStatement(
            Statements(
              Statements(
                NoStatement(
                ) [NoStatement]
                IfElseStatement(
                  IfConditionNode(
                    ConditionNode(
                      SingleConditionTerm(
                        ConditionTermNode(
                          ConditionFacts(
                            SingleConditionFact(
                              CondFactExpressionRelopExpression(
                                SingleExpression(
                                  TermFactor(
                                    DesignatorEmpty(
                                      DesignatorNode(
                                        Idents(
                                          SingleIdentExpr(
                                           Num
                                          ) [SingleIdentExpr]
                                         ZERO
                                        ) [Idents]
                                      ) [DesignatorNode]
                                    ) [DesignatorEmpty]
                                  ) [TermFactor]
                                ) [SingleExpression]
                                RelopLessEqual(
                                ) [RelopLessEqual]
                                SingleExpression(
                                  TermFactor(
                                    DesignatorEmpty(
                                      DesignatorNode(
                                        SingleIdentExpr(
                                         x
                                        ) [SingleIdentExpr]
                                      ) [DesignatorNode]
                                    ) [DesignatorEmpty]
                                  ) [TermFactor]
                                ) [SingleExpression]
                              ) [CondFactExpressionRelopExpression]
                            ) [SingleConditionFact]
                            CondFactExpressionRelopExpression(
                              SingleExpression(
                                TermFactor(
                                  DesignatorEmpty(
                                    DesignatorNode(
                                      SingleIdentExpr(
                                       x
                                      ) [SingleIdentExpr]
                                    ) [DesignatorNode]
                                  ) [DesignatorEmpty]
                                ) [TermFactor]
                              ) [SingleExpression]
                              RelopLess(
                              ) [RelopLess]
                              SingleExpression(
                                TermFactor(
                                  DesignatorEmpty(
                                    DesignatorNode(
                                      SingleIdentExpr(
                                       size
                                      ) [SingleIdentExpr]
                                    ) [DesignatorNode]
                                  ) [DesignatorEmpty]
                                ) [TermFactor]
                              ) [SingleExpression]
                            ) [CondFactExpressionRelopExpression]
                          ) [ConditionFacts]
                        ) [ConditionTermNode]
                      ) [SingleConditionTerm]
                    ) [ConditionNode]
                  ) [IfConditionNode]
                  IfStatementThen(
                    InBraceStatement(
                      Statements(
                        NoStatement(
                        ) [NoStatement]
                        DesignatorStatementOnly(
                          DesignatorStatementActPars(
                            DesignatorNode(
                              Idents(
                                SingleIdentExpr(
                                 val
                                ) [SingleIdentExpr]
                               putp
                              ) [Idents]
                            ) [DesignatorNode]
                            ActParsNode(
                              SingleActualParam(
                                ExpressionNode(
                                  SingleExpression(
                                    TermFactor(
                                      DesignatorBraceActPars(
                                        DesignatorNode(
                                          Idents(
                                            SingleIdentExpr(
                                             val
                                            ) [SingleIdentExpr]
                                           getp
                                          ) [Idents]
                                        ) [DesignatorNode]
                                        ActParsNode(
                                          SingleActualParam(
                                            SingleExpression(
                                              TermFactor(
                                                DesignatorEmpty(
                                                  DesignatorNode(
                                                    SingleIdentExpr(
                                                     x
                                                    ) [SingleIdentExpr]
                                                  ) [DesignatorNode]
                                                ) [DesignatorEmpty]
                                              ) [TermFactor]
                                            ) [SingleExpression]
                                          ) [SingleActualParam]
                                        ) [ActParsNode]
                                      ) [DesignatorBraceActPars]
                                    ) [TermFactor]
                                  ) [SingleExpression]
                                  AddopPlus(
                                  ) [AddopPlus]
                                  TermFactor(
                                    DesignatorEmpty(
                                      DesignatorNode(
                                        Idents(
                                          SingleIdentExpr(
                                           Num
                                          ) [SingleIdentExpr]
                                         ONE
                                        ) [Idents]
                                      ) [DesignatorNode]
                                    ) [DesignatorEmpty]
                                  ) [TermFactor]
                                ) [ExpressionNode]
                              ) [SingleActualParam]
                            ) [ActParsNode]
                          ) [DesignatorStatementActPars]
                        ) [DesignatorStatementOnly]
                      ) [Statements]
                    ) [InBraceStatement]
                  ) [IfStatementThen]
                  IfStatementElse(
                    IfStatement(
                      IfConditionNode(
                        ConditionNode(
                          SingleConditionTerm(
                            ConditionTermNode(
                              ConditionFacts(
                                SingleConditionFact(
                                  CondFactExpressionRelopExpression(
                                    SingleExpressionMinus(
                                      TermFactor(
                                        DesignatorEmpty(
                                          DesignatorNode(
                                            SingleIdentExpr(
                                             size
                                            ) [SingleIdentExpr]
                                          ) [DesignatorNode]
                                        ) [DesignatorEmpty]
                                      ) [TermFactor]
                                    ) [SingleExpressionMinus]
                                    RelopLess(
                                    ) [RelopLess]
                                    SingleExpression(
                                      TermFactor(
                                        DesignatorEmpty(
                                          DesignatorNode(
                                            SingleIdentExpr(
                                             x
                                            ) [SingleIdentExpr]
                                          ) [DesignatorNode]
                                        ) [DesignatorEmpty]
                                      ) [TermFactor]
                                    ) [SingleExpression]
                                  ) [CondFactExpressionRelopExpression]
                                ) [SingleConditionFact]
                                CondFactExpressionRelopExpression(
                                  SingleExpression(
                                    TermFactor(
                                      DesignatorEmpty(
                                        DesignatorNode(
                                          SingleIdentExpr(
                                           x
                                          ) [SingleIdentExpr]
                                        ) [DesignatorNode]
                                      ) [DesignatorEmpty]
                                    ) [TermFactor]
                                  ) [SingleExpression]
                                  RelopLess(
                                  ) [RelopLess]
                                  SingleExpression(
                                    TermFactor(
                                      ConstantNumber(
                                       0
                                      ) [ConstantNumber]
                                    ) [TermFactor]
                                  ) [SingleExpression]
                                ) [CondFactExpressionRelopExpression]
                              ) [ConditionFacts]
                            ) [ConditionTermNode]
                          ) [SingleConditionTerm]
                        ) [ConditionNode]
                      ) [IfConditionNode]
                      IfStatementThen(
                        InBraceStatement(
                          Statements(
                            NoStatement(
                            ) [NoStatement]
                            DesignatorStatementOnly(
                              DesignatorStatementActPars(
                                DesignatorNode(
                                  Idents(
                                    SingleIdentExpr(
                                     val
                                    ) [SingleIdentExpr]
                                   putn
                                  ) [Idents]
                                ) [DesignatorNode]
                                ActParsNode(
                                  SingleActualParam(
                                    ExpressionNode(
                                      SingleExpression(
                                        TermFactor(
                                          DesignatorBraceActPars(
                                            DesignatorNode(
                                              Idents(
                                                SingleIdentExpr(
                                                 val
                                                ) [SingleIdentExpr]
                                               getn
                                              ) [Idents]
                                            ) [DesignatorNode]
                                            ActParsNode(
                                              SingleActualParam(
                                                SingleExpressionMinus(
                                                  TermFactor(
                                                    DesignatorEmpty(
                                                      DesignatorNode(
                                                        SingleIdentExpr(
                                                         x
                                                        ) [SingleIdentExpr]
                                                      ) [DesignatorNode]
                                                    ) [DesignatorEmpty]
                                                  ) [TermFactor]
                                                ) [SingleExpressionMinus]
                                              ) [SingleActualParam]
                                            ) [ActParsNode]
                                          ) [DesignatorBraceActPars]
                                        ) [TermFactor]
                                      ) [SingleExpression]
                                      AddopPlus(
                                      ) [AddopPlus]
                                      TermFactor(
                                        ConstantNumber(
                                         1
                                        ) [ConstantNumber]
                                      ) [TermFactor]
                                    ) [ExpressionNode]
                                  ) [SingleActualParam]
                                ) [ActParsNode]
                              ) [DesignatorStatementActPars]
                            ) [DesignatorStatementOnly]
                          ) [Statements]
                        ) [InBraceStatement]
                      ) [IfStatementThen]
                    ) [IfStatement]
                  ) [IfStatementElse]
                ) [IfElseStatement]
              ) [Statements]
              ReadStatement(
                DesignatorNode(
                  SingleIdentExpr(
                   x
                  ) [SingleIdentExpr]
                ) [DesignatorNode]
              ) [ReadStatement]
            ) [Statements]
          ) [InBraceStatement]
        ) [ForStatement]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  02:40:30,243 - ===================================
INFO  02:40:30,246 - Definisana konstanta (10)size na liniji 2
INFO  02:40:30,247 - Deklarisana single promenljiva a na liniji 3
INFO  02:40:30,247 - Deklarisana single promenljiva b na liniji 3
INFO  02:40:30,247 - Deklarisana single promenljiva d na liniji 3
INFO  02:40:30,247 - Deklarisan novi enum tip: Num na liniji 5
INFO  02:40:30,247 - Definisana enum konstanta ZERO sa vrednoscu 0 na liniji 5
INFO  02:40:30,247 - Definisana enum konstanta ONE sa vrednoscu 1 na liniji 5
INFO  02:40:30,247 - Definisana enum konstanta TEN sa vrednoscu 10 na liniji 5
INFO  02:40:30,247 - Deklarisan novi interfejs: I na liniji 6
INFO  02:40:30,247 - Deklarisanp array polje pos na liniji 11
INFO  02:40:30,247 - Deklarisanp array polje neg na liniji 11
INFO  02:40:30,248 - Deklarisana metoda getp u okviru klase Table na liniji 15
INFO  02:40:30,248 - Deklarisan single argument idx na liniji 15
INFO  02:40:30,248 - Pronadjen poziv promenljive [Var idx: int, 0, 1 ] na liniji 15
INFO  02:40:30,248 - Pronadjen poziv promenljive [$elem: int, -1, -1 ] na liniji 15
INFO  02:40:30,248 - Deklarisana metoda getn u okviru klase Table na liniji 16
INFO  02:40:30,248 - Deklarisan single argument idx na liniji 16
INFO  02:40:30,248 - Pronadjen poziv promenljive [Var idx: int, 0, 1 ] na liniji 16
INFO  02:40:30,248 - Pronadjen poziv promenljive [$elem: int, -1, -1 ] na liniji 16
INFO  02:40:30,248 - Deklarisana nova klasa: Table na liniji 10
INFO  02:40:30,248 - Deklarisana single promenljiva val na liniji 19
ERROR 02:40:30,248 - Greska na liniji 20 : ime a vec deklarisano! 
ERROR 02:40:30,248 - Greska na liniji 20 : ime b vec deklarisano! 
INFO  02:40:30,248 - Deklarisana single promenljiva c na liniji 20
INFO  02:40:30,248 - Definisana funkcija f na liniji 22
INFO  02:40:30,248 - Deklarisan single argument ch na liniji 22
INFO  02:40:30,248 - Deklarisan single argument a na liniji 22
INFO  02:40:30,249 - Deklarisan single argument arg na liniji 22
INFO  02:40:30,249 - Deklarisana single promenljiva x na liniji 23
INFO  02:40:30,249 - Dodela vrednosti za x na liniji 25
ERROR 02:40:30,249 - Greska na liniji 26 : nekompatibilni tipovi u dodeli vrednosti! 
ERROR 02:40:30,249 - Greska na liniji 27 : nekompatibilni tipovi u dodeli vrednosti! 
ERROR 02:40:30,249 - Greska na liniji 28 : nekompatibilni tipovi u dodeli vrednosti! 
INFO  02:40:30,249 - Definisana funkcija main na liniji 31
INFO  02:40:30,249 - Deklarisana single promenljiva x na liniji 31
INFO  02:40:30,249 - Deklarisana single promenljiva i na liniji 31
INFO  02:40:30,249 - Deklarisana single promenljiva c na liniji 31
INFO  02:40:30,249 - Dodela vrednosti za val na liniji 34
INFO  02:40:30,249 - Izabrano polje : .pos
INFO  02:40:30,249 - Pronadjen poziv promenljive [Con size: int, 10, 0 ] na liniji 35
INFO  02:40:30,249 - Dodela vrednosti za pos na liniji 35
INFO  02:40:30,249 - Izabrano polje : .neg
INFO  02:40:30,249 - Pronadjen poziv promenljive [Con size: int, 10, 0 ] na liniji 36
INFO  02:40:30,249 - Dodela vrednosti za neg na liniji 36
INFO  02:40:30,249 - Dodela vrednosti za i na liniji 37
INFO  02:40:30,249 - Pronadjen poziv promenljive [Var i: int, 1, 1 ] na liniji 37
INFO  02:40:30,249 - Pronadjen poziv promenljive [Con size: int, 10, 0 ] na liniji 37
ERROR 02:40:30,249 - Greska na liniji 39 : polje putp nije deklarisano! (u okviru:val)
INFO  02:40:30,250 - Pronadjen poziv promenljive [Var i: int, 1, 1 ] na liniji 39
ERROR 02:40:30,250 - Greska na liniji 39 : ime noObj nije funkcija!
ERROR 02:40:30,250 - Greska na liniji 40 : polje putn nije deklarisano! (u okviru:val)
INFO  02:40:30,250 - Pronadjen poziv promenljive [Var i: int, 1, 1 ] na liniji 40
ERROR 02:40:30,250 - Greska na liniji 40 : ime noObj nije funkcija!
INFO  02:40:30,250 - Pronadjen poziv promenljive [Var c: char, 2, 1 ] na liniji 42
INFO  02:40:30,250 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 42
INFO  02:40:30,250 - Pronadjen poziv promenljive [Var i: int, 1, 1 ] na liniji 42
INFO  02:40:30,250 - Pronadjen poziv funkcije f sa 3/4 argumenta na liniji 42
INFO  02:40:30,250 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 46
INFO  02:40:30,250 - Izabrano polje : .ZERO
INFO  02:40:30,250 - Pronadjen poziv promenljive [Con ZERO: int, 0, 1 ] na liniji 48
INFO  02:40:30,250 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 48
INFO  02:40:30,250 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 48
INFO  02:40:30,250 - Pronadjen poziv promenljive [Con size: int, 10, 0 ] na liniji 48
ERROR 02:40:30,250 - Greska na liniji 50 : polje putp nije deklarisano! (u okviru:val)
INFO  02:40:30,250 - Izabrano polje : .getp
INFO  02:40:30,250 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 50
INFO  02:40:30,250 - Pronadjen poziv funkcije getp sa 1/1 argumenta na liniji 50
INFO  02:40:30,250 - Izabrano polje : .ONE
INFO  02:40:30,250 - Pronadjen poziv promenljive [Con ONE: int, 1, 1 ] na liniji 50
ERROR 02:40:30,250 - Greska na liniji 50 : ime noObj nije funkcija!
INFO  02:40:30,250 - Pronadjen poziv promenljive [Con size: int, 10, 0 ] na liniji 52
INFO  02:40:30,250 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 52
INFO  02:40:30,250 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 52
ERROR 02:40:30,250 - Greska na liniji 54 : polje putn nije deklarisano! (u okviru:val)
INFO  02:40:30,250 - Izabrano polje : .getn
INFO  02:40:30,251 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 54
INFO  02:40:30,251 - Pronadjen poziv funkcije getn sa 1/1 argumenta na liniji 54
ERROR 02:40:30,251 - Greska na liniji 54 : ime noObj nije funkcija!
INFO  02:40:30,251 - main funkcija je korektna.  na liniji 31
INFO  02:40:30,251 - ===================================
ERROR 02:40:30,251 - Parsiranje NIJE uspesno zavrseno!
