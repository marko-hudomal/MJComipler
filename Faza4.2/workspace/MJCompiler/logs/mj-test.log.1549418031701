INFO  02:53:32,540 - Putanja iz argumenta: test/program.mj
INFO  02:53:32,541 - Compiling source file: D:\ETF\PP1\Projekat\workspace\MJCompiler\test\program.mj
INFO  02:53:32,575 - #2 program
INFO  02:53:32,575 - #45 P
INFO  02:53:32,575 - #8 const
INFO  02:53:32,576 - #45 int
INFO  02:53:32,576 - #45 size
INFO  02:53:32,576 - #26 =
INFO  02:53:32,576 - #44 10
INFO  02:53:32,576 - #18 ;
INFO  02:53:32,576 - #8 const
INFO  02:53:32,577 - #45 char
INFO  02:53:32,577 - #45 k
INFO  02:53:32,577 - #26 =
INFO  02:53:32,577 - #46 a
INFO  02:53:32,577 - #18 ;
INFO  02:53:32,577 - #45 int
INFO  02:53:32,577 - #45 a
INFO  02:53:32,578 - #19 ,
INFO  02:53:32,578 - #45 b
INFO  02:53:32,578 - #19 ,
INFO  02:53:32,578 - #45 c
INFO  02:53:32,578 - #18 ;
INFO  02:53:32,578 - #45 char
INFO  02:53:32,579 - #45 e
INFO  02:53:32,579 - #19 ,
INFO  02:53:32,579 - #45 f
INFO  02:53:32,579 - #18 ;
INFO  02:53:32,579 - #45 bool
INFO  02:53:32,579 - #45 g
INFO  02:53:32,579 - #18 ;
INFO  02:53:32,579 - #6 enum
INFO  02:53:32,579 - #45 Num
INFO  02:53:32,579 - #12 {
INFO  02:53:32,579 - #45 ZERO
INFO  02:53:32,579 - #19 ,
INFO  02:53:32,580 - #45 ONE
INFO  02:53:32,580 - #19 ,
INFO  02:53:32,580 - #45 TEN
INFO  02:53:32,580 - #26 =
INFO  02:53:32,580 - #44 10
INFO  02:53:32,580 - #13 }
INFO  02:53:32,580 - #5 interface
INFO  02:53:32,580 - #45 I
INFO  02:53:32,580 - #12 {
INFO  02:53:32,580 - #13 }
INFO  02:53:32,581 - #4 class
INFO  02:53:32,581 - #45 Table
INFO  02:53:32,581 - #42 implements
INFO  02:53:32,582 - #45 I
INFO  02:53:32,582 - #12 {
INFO  02:53:32,582 - #45 int
INFO  02:53:32,582 - #45 pos
INFO  02:53:32,583 - #14 [
INFO  02:53:32,583 - #15 ]
INFO  02:53:32,583 - #19 ,
INFO  02:53:32,583 - #45 neg
INFO  02:53:32,583 - #14 [
INFO  02:53:32,583 - #15 ]
INFO  02:53:32,583 - #18 ;
INFO  02:53:32,583 - #12 {
INFO  02:53:32,583 - #39 void
INFO  02:53:32,584 - #45 putp
INFO  02:53:32,584 - #16 (
INFO  02:53:32,585 - #45 int
INFO  02:53:32,585 - #45 a
INFO  02:53:32,585 - #19 ,
INFO  02:53:32,585 - #45 int
INFO  02:53:32,585 - #45 idx
INFO  02:53:32,585 - #17 )
INFO  02:53:32,585 - #12 {
INFO  02:53:32,586 - #45 pos
INFO  02:53:32,586 - #14 [
INFO  02:53:32,587 - #45 idx
INFO  02:53:32,587 - #15 ]
INFO  02:53:32,587 - #26 =
INFO  02:53:32,587 - #45 a
INFO  02:53:32,588 - #18 ;
INFO  02:53:32,588 - #13 }
INFO  02:53:32,588 - #39 void
INFO  02:53:32,589 - #45 putn
INFO  02:53:32,589 - #16 (
INFO  02:53:32,589 - #45 int
INFO  02:53:32,589 - #45 a
INFO  02:53:32,589 - #19 ,
INFO  02:53:32,589 - #45 int
INFO  02:53:32,589 - #45 idx
INFO  02:53:32,589 - #17 )
INFO  02:53:32,589 - #12 {
INFO  02:53:32,589 - #45 neg
INFO  02:53:32,589 - #14 [
INFO  02:53:32,589 - #45 idx
INFO  02:53:32,589 - #15 ]
INFO  02:53:32,589 - #26 =
INFO  02:53:32,589 - #22 -
INFO  02:53:32,589 - #45 a
INFO  02:53:32,589 - #18 ;
INFO  02:53:32,589 - #13 }
INFO  02:53:32,589 - #45 int
INFO  02:53:32,590 - #45 getp
INFO  02:53:32,590 - #16 (
INFO  02:53:32,590 - #45 int
INFO  02:53:32,590 - #45 idx
INFO  02:53:32,590 - #17 )
INFO  02:53:32,590 - #12 {
INFO  02:53:32,590 - #38 return
INFO  02:53:32,590 - #45 pos
INFO  02:53:32,590 - #14 [
INFO  02:53:32,590 - #45 idx
INFO  02:53:32,590 - #15 ]
INFO  02:53:32,590 - #18 ;
INFO  02:53:32,590 - #13 }
INFO  02:53:32,590 - #45 int
INFO  02:53:32,590 - #45 getn
INFO  02:53:32,590 - #16 (
INFO  02:53:32,590 - #45 int
INFO  02:53:32,590 - #45 idx
INFO  02:53:32,590 - #17 )
INFO  02:53:32,590 - #12 {
INFO  02:53:32,590 - #38 return
INFO  02:53:32,590 - #45 neg
INFO  02:53:32,590 - #14 [
INFO  02:53:32,591 - #45 idx
INFO  02:53:32,591 - #15 ]
INFO  02:53:32,591 - #18 ;
INFO  02:53:32,591 - #13 }
INFO  02:53:32,591 - #13 }
INFO  02:53:32,591 - #13 }
INFO  02:53:32,591 - #45 Table
INFO  02:53:32,591 - #45 val
INFO  02:53:32,591 - #18 ;
INFO  02:53:32,591 - #12 {
INFO  02:53:32,591 - #45 char
INFO  02:53:32,593 - #45 funkc
INFO  02:53:32,593 - #16 (
INFO  02:53:32,593 - #45 int
INFO  02:53:32,593 - #45 a
INFO  02:53:32,593 - #19 ,
INFO  02:53:32,593 - #45 char
INFO  02:53:32,593 - #45 b
INFO  02:53:32,593 - #19 ,
INFO  02:53:32,593 - #45 bool
INFO  02:53:32,593 - #45 c
INFO  02:53:32,593 - #17 )
INFO  02:53:32,594 - #45 char
INFO  02:53:32,594 - #45 x
INFO  02:53:32,594 - #18 ;
INFO  02:53:32,594 - #12 {
INFO  02:53:32,594 - #11 print
INFO  02:53:32,594 - #16 (
INFO  02:53:32,594 - #45 a
INFO  02:53:32,594 - #17 )
INFO  02:53:32,594 - #18 ;
INFO  02:53:32,594 - #11 print
INFO  02:53:32,594 - #16 (
INFO  02:53:32,594 - #45 eol
INFO  02:53:32,594 - #17 )
INFO  02:53:32,594 - #18 ;
INFO  02:53:32,594 - #11 print
INFO  02:53:32,594 - #16 (
INFO  02:53:32,594 - #45 b
INFO  02:53:32,594 - #17 )
INFO  02:53:32,594 - #18 ;
INFO  02:53:32,594 - #11 print
INFO  02:53:32,594 - #16 (
INFO  02:53:32,594 - #45 eol
INFO  02:53:32,594 - #17 )
INFO  02:53:32,594 - #18 ;
INFO  02:53:32,594 - #45 x
INFO  02:53:32,595 - #26 =
INFO  02:53:32,595 - #46 A
INFO  02:53:32,595 - #18 ;
INFO  02:53:32,595 - #9 if
INFO  02:53:32,595 - #16 (
INFO  02:53:32,595 - #45 c
INFO  02:53:32,595 - #35 &&
INFO  02:53:32,595 - #45 b
INFO  02:53:32,595 - #29 ==
INFO  02:53:32,595 - #46 #
INFO  02:53:32,595 - #35 &&
INFO  02:53:32,596 - #45 a
INFO  02:53:32,596 - #33 <
INFO  02:53:32,596 - #44 10
INFO  02:53:32,596 - #17 )
INFO  02:53:32,596 - #12 {
INFO  02:53:32,596 - #45 x
INFO  02:53:32,596 - #26 =
INFO  02:53:32,597 - #46 B
INFO  02:53:32,597 - #18 ;
INFO  02:53:32,597 - #13 }
INFO  02:53:32,597 - #7 else
INFO  02:53:32,597 - #45 x
INFO  02:53:32,597 - #26 =
INFO  02:53:32,597 - #46 C
INFO  02:53:32,597 - #18 ;
INFO  02:53:32,597 - #38 return
INFO  02:53:32,598 - #45 x
INFO  02:53:32,598 - #18 ;
INFO  02:53:32,598 - #13 }
INFO  02:53:32,598 - #39 void
INFO  02:53:32,598 - #45 main
INFO  02:53:32,598 - #16 (
INFO  02:53:32,598 - #17 )
INFO  02:53:32,598 - #45 int
INFO  02:53:32,598 - #45 x
INFO  02:53:32,598 - #19 ,
INFO  02:53:32,598 - #45 i
INFO  02:53:32,598 - #18 ;
INFO  02:53:32,598 - #45 char
INFO  02:53:32,598 - #45 c
INFO  02:53:32,598 - #18 ;
INFO  02:53:32,598 - #12 {
INFO  02:53:32,599 - #45 val
INFO  02:53:32,599 - #26 =
INFO  02:53:32,599 - #10 new
INFO  02:53:32,599 - #45 Table
INFO  02:53:32,599 - #18 ;
INFO  02:53:32,599 - #45 val
INFO  02:53:32,599 - #20 .
INFO  02:53:32,599 - #45 pos
INFO  02:53:32,599 - #26 =
INFO  02:53:32,599 - #10 new
INFO  02:53:32,599 - #45 int
INFO  02:53:32,599 - #14 [
INFO  02:53:32,599 - #45 size
INFO  02:53:32,599 - #15 ]
INFO  02:53:32,599 - #18 ;
INFO  02:53:32,600 - #45 val
INFO  02:53:32,600 - #20 .
INFO  02:53:32,600 - #45 neg
INFO  02:53:32,600 - #26 =
INFO  02:53:32,600 - #10 new
INFO  02:53:32,600 - #45 int
INFO  02:53:32,600 - #14 [
INFO  02:53:32,600 - #45 size
INFO  02:53:32,600 - #15 ]
INFO  02:53:32,600 - #18 ;
INFO  02:53:32,600 - #40 for
INFO  02:53:32,600 - #16 (
INFO  02:53:32,600 - #45 i
INFO  02:53:32,600 - #26 =
INFO  02:53:32,600 - #44 1
INFO  02:53:32,600 - #18 ;
INFO  02:53:32,600 - #45 i
INFO  02:53:32,600 - #34 <=
INFO  02:53:32,601 - #45 size
INFO  02:53:32,601 - #18 ;
INFO  02:53:32,601 - #45 i
INFO  02:53:32,601 - #27 ++
INFO  02:53:32,601 - #17 )
INFO  02:53:32,602 - #12 {
INFO  02:53:32,602 - #45 val
INFO  02:53:32,602 - #20 .
INFO  02:53:32,602 - #45 putp
INFO  02:53:32,602 - #16 (
INFO  02:53:32,602 - #45 i
INFO  02:53:32,603 - #23 *
INFO  02:53:32,603 - #44 100
INFO  02:53:32,604 - #19 ,
INFO  02:53:32,604 - #45 i
INFO  02:53:32,604 - #17 )
INFO  02:53:32,604 - #18 ;
INFO  02:53:32,605 - #45 val
INFO  02:53:32,605 - #20 .
INFO  02:53:32,605 - #45 putn
INFO  02:53:32,605 - #16 (
INFO  02:53:32,605 - #45 i
INFO  02:53:32,605 - #23 *
INFO  02:53:32,605 - #44 100
INFO  02:53:32,605 - #19 ,
INFO  02:53:32,605 - #45 i
INFO  02:53:32,605 - #17 )
INFO  02:53:32,605 - #18 ;
INFO  02:53:32,605 - #13 }
INFO  02:53:32,605 - #11 print
INFO  02:53:32,605 - #16 (
INFO  02:53:32,605 - #45 funkc
INFO  02:53:32,605 - #16 (
INFO  02:53:32,605 - #44 1
INFO  02:53:32,605 - #19 ,
INFO  02:53:32,605 - #46 #
INFO  02:53:32,605 - #19 ,
INFO  02:53:32,605 - #44 1
INFO  02:53:32,605 - #17 )
INFO  02:53:32,605 - #17 )
INFO  02:53:32,605 - #18 ;
INFO  02:53:32,605 - #37 read
INFO  02:53:32,605 - #16 (
INFO  02:53:32,605 - #45 x
INFO  02:53:32,605 - #17 )
INFO  02:53:32,605 - #18 ;
INFO  02:53:32,605 - #40 for
INFO  02:53:32,606 - #16 (
INFO  02:53:32,606 - #18 ;
INFO  02:53:32,606 - #18 ;
INFO  02:53:32,606 - #17 )
INFO  02:53:32,606 - #12 {
INFO  02:53:32,606 - #9 if
INFO  02:53:32,606 - #16 (
INFO  02:53:32,606 - #45 Num
INFO  02:53:32,606 - #20 .
INFO  02:53:32,606 - #45 ZERO
INFO  02:53:32,606 - #34 <=
INFO  02:53:32,606 - #45 x
INFO  02:53:32,606 - #35 &&
INFO  02:53:32,606 - #45 x
INFO  02:53:32,606 - #33 <
INFO  02:53:32,606 - #45 size
INFO  02:53:32,606 - #17 )
INFO  02:53:32,607 - #12 {
INFO  02:53:32,607 - #45 val
INFO  02:53:32,607 - #20 .
INFO  02:53:32,607 - #45 putp
INFO  02:53:32,607 - #16 (
INFO  02:53:32,607 - #45 val
INFO  02:53:32,607 - #20 .
INFO  02:53:32,607 - #45 getp
INFO  02:53:32,607 - #16 (
INFO  02:53:32,607 - #45 x
INFO  02:53:32,607 - #17 )
INFO  02:53:32,607 - #21 +
INFO  02:53:32,607 - #45 Num
INFO  02:53:32,607 - #20 .
INFO  02:53:32,607 - #45 ONE
INFO  02:53:32,607 - #19 ,
INFO  02:53:32,607 - #44 0
INFO  02:53:32,608 - #17 )
INFO  02:53:32,608 - #18 ;
INFO  02:53:32,608 - #13 }
INFO  02:53:32,608 - #7 else
INFO  02:53:32,608 - #9 if
INFO  02:53:32,608 - #16 (
INFO  02:53:32,608 - #22 -
INFO  02:53:32,608 - #45 size
INFO  02:53:32,608 - #33 <
INFO  02:53:32,608 - #45 x
INFO  02:53:32,608 - #35 &&
INFO  02:53:32,608 - #45 x
INFO  02:53:32,608 - #33 <
INFO  02:53:32,608 - #44 0
INFO  02:53:32,608 - #17 )
INFO  02:53:32,608 - #12 {
INFO  02:53:32,608 - #45 val
INFO  02:53:32,608 - #20 .
INFO  02:53:32,608 - #45 putn
INFO  02:53:32,608 - #16 (
INFO  02:53:32,608 - #45 val
INFO  02:53:32,608 - #20 .
INFO  02:53:32,608 - #45 getn
INFO  02:53:32,608 - #16 (
INFO  02:53:32,608 - #22 -
INFO  02:53:32,608 - #45 x
INFO  02:53:32,608 - #17 )
INFO  02:53:32,608 - #21 +
INFO  02:53:32,608 - #44 1
INFO  02:53:32,608 - #19 ,
INFO  02:53:32,608 - #44 0
INFO  02:53:32,608 - #17 )
INFO  02:53:32,608 - #18 ;
INFO  02:53:32,608 - #13 }
INFO  02:53:32,608 - #37 read
INFO  02:53:32,608 - #16 (
INFO  02:53:32,608 - #45 x
INFO  02:53:32,608 - #17 )
INFO  02:53:32,608 - #18 ;
INFO  02:53:32,608 - #13 }
INFO  02:53:32,608 - #13 }
INFO  02:53:32,608 - #13 }
INFO  02:53:32,618 - Program(
  ProgName(
   P
  ) [ProgName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              Declarations(
                Declarations(
                  Declarations(
                    NoDecl(
                    ) [NoDecl]
                    ConstDeclaration(
                      ConstDeclNode(
                        ConstDeclType(
                          TypeNode(
                           int
                          ) [TypeNode]
                        ) [ConstDeclType]
                        SingleConstant(
                          IdentEqualConstantNode(
                           size
                            NumberNode(
                             10
                            ) [NumberNode]
                          ) [IdentEqualConstantNode]
                        ) [SingleConstant]
                      ) [ConstDeclNode]
                    ) [ConstDeclaration]
                  ) [Declarations]
                  ConstDeclaration(
                    ConstDeclNode(
                      ConstDeclType(
                        TypeNode(
                         char
                        ) [TypeNode]
                      ) [ConstDeclType]
                      SingleConstant(
                        IdentEqualConstantNode(
                         k
                          CharNode(
                           a
                          ) [CharNode]
                        ) [IdentEqualConstantNode]
                      ) [SingleConstant]
                    ) [ConstDeclNode]
                  ) [ConstDeclaration]
                ) [Declarations]
                VarDeclaration(
                  GlobalVarDeclNode(
                    VarDeclType(
                      TypeNode(
                       int
                      ) [TypeNode]
                    ) [VarDeclType]
                    Variables(
                      Variables(
                        SingleVariable(
                          VariableNoBracket(
                           a
                          ) [VariableNoBracket]
                        ) [SingleVariable]
                        VariableNoBracket(
                         b
                        ) [VariableNoBracket]
                      ) [Variables]
                      VariableNoBracket(
                       c
                      ) [VariableNoBracket]
                    ) [Variables]
                  ) [GlobalVarDeclNode]
                ) [VarDeclaration]
              ) [Declarations]
              VarDeclaration(
                GlobalVarDeclNode(
                  VarDeclType(
                    TypeNode(
                     char
                    ) [TypeNode]
                  ) [VarDeclType]
                  Variables(
                    SingleVariable(
                      VariableNoBracket(
                       e
                      ) [VariableNoBracket]
                    ) [SingleVariable]
                    VariableNoBracket(
                     f
                    ) [VariableNoBracket]
                  ) [Variables]
                ) [GlobalVarDeclNode]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              GlobalVarDeclNode(
                VarDeclType(
                  TypeNode(
                   bool
                  ) [TypeNode]
                ) [VarDeclType]
                SingleVariable(
                  VariableNoBracket(
                   g
                  ) [VariableNoBracket]
                ) [SingleVariable]
              ) [GlobalVarDeclNode]
            ) [VarDeclaration]
          ) [Declarations]
          EnumDeclaration(
            EnumDeclarationNode(
              EnumIdent(
               Num
              ) [EnumIdent]
              Enumerations(
                Enumerations(
                  SingleEnumeration(
                    EnumerationNoVal(
                     ZERO
                    ) [EnumerationNoVal]
                  ) [SingleEnumeration]
                  EnumerationNoVal(
                   ONE
                  ) [EnumerationNoVal]
                ) [Enumerations]
                EnumerationVal(
                 TEN
                 10
                ) [EnumerationVal]
              ) [Enumerations]
            ) [EnumDeclarationNode]
          ) [EnumDeclaration]
        ) [Declarations]
        InterfaceDeclaration(
          InterfaceDeclarationNode(
            InterfaceIdent(
             I
            ) [InterfaceIdent]
            NoInterfaceMethodDeclaration(
            ) [NoInterfaceMethodDeclaration]
          ) [InterfaceDeclarationNode]
        ) [InterfaceDeclaration]
      ) [Declarations]
      ClassDeclaration(
        ClassDeclarationWithMethods(
          ClassDeclIdent(
           Table
          ) [ClassDeclIdent]
          NoExtension(
          ) [NoExtension]
          Implementation(
            SinglType(
              TypeNode(
               I
              ) [TypeNode]
            ) [SinglType]
          ) [Implementation]
          ClassVarDeclarationList(
            NoClassVarDeclaration(
            ) [NoClassVarDeclaration]
            ClassVarDeclNode(
              ClassVarDeclType(
                TypeNode(
                 int
                ) [TypeNode]
              ) [ClassVarDeclType]
              ClassVariables(
                SingleClassVariable(
                  VariableBracket(
                   pos
                  ) [VariableBracket]
                ) [SingleClassVariable]
                VariableBracket(
                 neg
                ) [VariableBracket]
              ) [ClassVariables]
            ) [ClassVarDeclNode]
          ) [ClassVarDeclarationList]
          ClassMethodDeclarations(
            ClassMethodDeclarations(
              ClassMethodDeclarations(
                ClassMethodDeclarations(
                  NoClassMethodDecl(
                  ) [NoClassMethodDecl]
                  MethodDecl(
                    MethodTypeName(
                      VoidType(
                      ) [VoidType]
                     putp
                    ) [MethodTypeName]
                    FormalParams(
                      FormalParamDecls(
                        SingleFormalParamDecl(
                          FormalParamDeclarationNoBrackets(
                            TypeNode(
                             int
                            ) [TypeNode]
                           a
                          ) [FormalParamDeclarationNoBrackets]
                        ) [SingleFormalParamDecl]
                        FormalParamDeclarationNoBrackets(
                          TypeNode(
                           int
                          ) [TypeNode]
                         idx
                        ) [FormalParamDeclarationNoBrackets]
                      ) [FormalParamDecls]
                    ) [FormalParams]
                    NoVarDeclaration(
                    ) [NoVarDeclaration]
                    MethodLBRACE(
                    ) [MethodLBRACE]
                    Statements(
                      NoStatement(
                      ) [NoStatement]
                      DesignatorStatementOnly(
                        DesignatorStatementAssignop(
                          DesignatorNode(
                            Exprs(
                              IdentExprListArray(
                                SingleIdentExpr(
                                 pos
                                ) [SingleIdentExpr]
                              ) [IdentExprListArray]
                              SingleExpression(
                                TermFactor(
                                  DesignatorEmpty(
                                    DesignatorNode(
                                      SingleIdentExpr(
                                       idx
                                      ) [SingleIdentExpr]
                                    ) [DesignatorNode]
                                  ) [DesignatorEmpty]
                                ) [TermFactor]
                              ) [SingleExpression]
                            ) [Exprs]
                          ) [DesignatorNode]
                          Assignop(
                          ) [Assignop]
                          SingleExpression(
                            TermFactor(
                              DesignatorEmpty(
                                DesignatorNode(
                                  SingleIdentExpr(
                                   a
                                  ) [SingleIdentExpr]
                                ) [DesignatorNode]
                              ) [DesignatorEmpty]
                            ) [TermFactor]
                          ) [SingleExpression]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementOnly]
                    ) [Statements]
                  ) [MethodDecl]
                ) [ClassMethodDeclarations]
                MethodDecl(
                  MethodTypeName(
                    VoidType(
                    ) [VoidType]
                   putn
                  ) [MethodTypeName]
                  FormalParams(
                    FormalParamDecls(
                      SingleFormalParamDecl(
                        FormalParamDeclarationNoBrackets(
                          TypeNode(
                           int
                          ) [TypeNode]
                         a
                        ) [FormalParamDeclarationNoBrackets]
                      ) [SingleFormalParamDecl]
                      FormalParamDeclarationNoBrackets(
                        TypeNode(
                         int
                        ) [TypeNode]
                       idx
                      ) [FormalParamDeclarationNoBrackets]
                    ) [FormalParamDecls]
                  ) [FormalParams]
                  NoVarDeclaration(
                  ) [NoVarDeclaration]
                  MethodLBRACE(
                  ) [MethodLBRACE]
                  Statements(
                    NoStatement(
                    ) [NoStatement]
                    DesignatorStatementOnly(
                      DesignatorStatementAssignop(
                        DesignatorNode(
                          Exprs(
                            IdentExprListArray(
                              SingleIdentExpr(
                               neg
                              ) [SingleIdentExpr]
                            ) [IdentExprListArray]
                            SingleExpression(
                              TermFactor(
                                DesignatorEmpty(
                                  DesignatorNode(
                                    SingleIdentExpr(
                                     idx
                                    ) [SingleIdentExpr]
                                  ) [DesignatorNode]
                                ) [DesignatorEmpty]
                              ) [TermFactor]
                            ) [SingleExpression]
                          ) [Exprs]
                        ) [DesignatorNode]
                        Assignop(
                        ) [Assignop]
                        SingleExpressionMinus(
                          TermFactor(
                            DesignatorEmpty(
                              DesignatorNode(
                                SingleIdentExpr(
                                 a
                                ) [SingleIdentExpr]
                              ) [DesignatorNode]
                            ) [DesignatorEmpty]
                          ) [TermFactor]
                        ) [SingleExpressionMinus]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementOnly]
                  ) [Statements]
                ) [MethodDecl]
              ) [ClassMethodDeclarations]
              MethodDecl(
                MethodTypeName(
                  NoVoidType(
                    TypeNode(
                     int
                    ) [TypeNode]
                  ) [NoVoidType]
                 getp
                ) [MethodTypeName]
                FormalParams(
                  SingleFormalParamDecl(
                    FormalParamDeclarationNoBrackets(
                      TypeNode(
                       int
                      ) [TypeNode]
                     idx
                    ) [FormalParamDeclarationNoBrackets]
                  ) [SingleFormalParamDecl]
                ) [FormalParams]
                NoVarDeclaration(
                ) [NoVarDeclaration]
                MethodLBRACE(
                ) [MethodLBRACE]
                Statements(
                  NoStatement(
                  ) [NoStatement]
                  ReturnStatementExpr(
                    SingleExpression(
                      TermFactor(
                        DesignatorEmpty(
                          DesignatorNode(
                            Exprs(
                              IdentExprListArray(
                                SingleIdentExpr(
                                 pos
                                ) [SingleIdentExpr]
                              ) [IdentExprListArray]
                              SingleExpression(
                                TermFactor(
                                  DesignatorEmpty(
                                    DesignatorNode(
                                      SingleIdentExpr(
                                       idx
                                      ) [SingleIdentExpr]
                                    ) [DesignatorNode]
                                  ) [DesignatorEmpty]
                                ) [TermFactor]
                              ) [SingleExpression]
                            ) [Exprs]
                          ) [DesignatorNode]
                        ) [DesignatorEmpty]
                      ) [TermFactor]
                    ) [SingleExpression]
                  ) [ReturnStatementExpr]
                ) [Statements]
              ) [MethodDecl]
            ) [ClassMethodDeclarations]
            MethodDecl(
              MethodTypeName(
                NoVoidType(
                  TypeNode(
                   int
                  ) [TypeNode]
                ) [NoVoidType]
               getn
              ) [MethodTypeName]
              FormalParams(
                SingleFormalParamDecl(
                  FormalParamDeclarationNoBrackets(
                    TypeNode(
                     int
                    ) [TypeNode]
                   idx
                  ) [FormalParamDeclarationNoBrackets]
                ) [SingleFormalParamDecl]
              ) [FormalParams]
              NoVarDeclaration(
              ) [NoVarDeclaration]
              MethodLBRACE(
              ) [MethodLBRACE]
              Statements(
                NoStatement(
                ) [NoStatement]
                ReturnStatementExpr(
                  SingleExpression(
                    TermFactor(
                      DesignatorEmpty(
                        DesignatorNode(
                          Exprs(
                            IdentExprListArray(
                              SingleIdentExpr(
                               neg
                              ) [SingleIdentExpr]
                            ) [IdentExprListArray]
                            SingleExpression(
                              TermFactor(
                                DesignatorEmpty(
                                  DesignatorNode(
                                    SingleIdentExpr(
                                     idx
                                    ) [SingleIdentExpr]
                                  ) [DesignatorNode]
                                ) [DesignatorEmpty]
                              ) [TermFactor]
                            ) [SingleExpression]
                          ) [Exprs]
                        ) [DesignatorNode]
                      ) [DesignatorEmpty]
                    ) [TermFactor]
                  ) [SingleExpression]
                ) [ReturnStatementExpr]
              ) [Statements]
            ) [MethodDecl]
          ) [ClassMethodDeclarations]
        ) [ClassDeclarationWithMethods]
      ) [ClassDeclaration]
    ) [Declarations]
    VarDeclaration(
      GlobalVarDeclNode(
        VarDeclType(
          TypeNode(
           Table
          ) [TypeNode]
        ) [VarDeclType]
        SingleVariable(
          VariableNoBracket(
           val
          ) [VariableNoBracket]
        ) [SingleVariable]
      ) [GlobalVarDeclNode]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        MethodTypeName(
          NoVoidType(
            TypeNode(
             char
            ) [TypeNode]
          ) [NoVoidType]
         funkc
        ) [MethodTypeName]
        FormalParams(
          FormalParamDecls(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclarationNoBrackets(
                  TypeNode(
                   int
                  ) [TypeNode]
                 a
                ) [FormalParamDeclarationNoBrackets]
              ) [SingleFormalParamDecl]
              FormalParamDeclarationNoBrackets(
                TypeNode(
                 char
                ) [TypeNode]
               b
              ) [FormalParamDeclarationNoBrackets]
            ) [FormalParamDecls]
            FormalParamDeclarationNoBrackets(
              TypeNode(
               bool
              ) [TypeNode]
             c
            ) [FormalParamDeclarationNoBrackets]
          ) [FormalParamDecls]
        ) [FormalParams]
        VarDeclarationList(
          NoVarDeclaration(
          ) [NoVarDeclaration]
          VarDeclNode(
            VarDeclType(
              TypeNode(
               char
              ) [TypeNode]
            ) [VarDeclType]
            SingleVariable(
              VariableNoBracket(
               x
              ) [VariableNoBracket]
            ) [SingleVariable]
          ) [VarDeclNode]
        ) [VarDeclarationList]
        MethodLBRACE(
        ) [MethodLBRACE]
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      NoStatement(
                      ) [NoStatement]
                      PrintStatement(
                        SingleExpression(
                          TermFactor(
                            DesignatorEmpty(
                              DesignatorNode(
                                SingleIdentExpr(
                                 a
                                ) [SingleIdentExpr]
                              ) [DesignatorNode]
                            ) [DesignatorEmpty]
                          ) [TermFactor]
                        ) [SingleExpression]
                      ) [PrintStatement]
                    ) [Statements]
                    PrintStatement(
                      SingleExpression(
                        TermFactor(
                          DesignatorEmpty(
                            DesignatorNode(
                              SingleIdentExpr(
                               eol
                              ) [SingleIdentExpr]
                            ) [DesignatorNode]
                          ) [DesignatorEmpty]
                        ) [TermFactor]
                      ) [SingleExpression]
                    ) [PrintStatement]
                  ) [Statements]
                  PrintStatement(
                    SingleExpression(
                      TermFactor(
                        DesignatorEmpty(
                          DesignatorNode(
                            SingleIdentExpr(
                             b
                            ) [SingleIdentExpr]
                          ) [DesignatorNode]
                        ) [DesignatorEmpty]
                      ) [TermFactor]
                    ) [SingleExpression]
                  ) [PrintStatement]
                ) [Statements]
                PrintStatement(
                  SingleExpression(
                    TermFactor(
                      DesignatorEmpty(
                        DesignatorNode(
                          SingleIdentExpr(
                           eol
                          ) [SingleIdentExpr]
                        ) [DesignatorNode]
                      ) [DesignatorEmpty]
                    ) [TermFactor]
                  ) [SingleExpression]
                ) [PrintStatement]
              ) [Statements]
              DesignatorStatementOnly(
                DesignatorStatementAssignop(
                  DesignatorNode(
                    SingleIdentExpr(
                     x
                    ) [SingleIdentExpr]
                  ) [DesignatorNode]
                  Assignop(
                  ) [Assignop]
                  SingleExpression(
                    TermFactor(
                      ConstantCharacter(
                       A
                      ) [ConstantCharacter]
                    ) [TermFactor]
                  ) [SingleExpression]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementOnly]
            ) [Statements]
            IfElseStatement(
              IfConditionNode(
                ConditionNode(
                  SingleConditionTerm(
                    ConditionTermNode(
                      ConditionFacts(
                        ConditionFacts(
                          SingleConditionFact(
                            CondFactExpression(
                              SingleExpression(
                                TermFactor(
                                  DesignatorEmpty(
                                    DesignatorNode(
                                      SingleIdentExpr(
                                       c
                                      ) [SingleIdentExpr]
                                    ) [DesignatorNode]
                                  ) [DesignatorEmpty]
                                ) [TermFactor]
                              ) [SingleExpression]
                            ) [CondFactExpression]
                          ) [SingleConditionFact]
                          CondFactExpressionRelopExpression(
                            SingleExpression(
                              TermFactor(
                                DesignatorEmpty(
                                  DesignatorNode(
                                    SingleIdentExpr(
                                     b
                                    ) [SingleIdentExpr]
                                  ) [DesignatorNode]
                                ) [DesignatorEmpty]
                              ) [TermFactor]
                            ) [SingleExpression]
                            RelopEqualEqual(
                            ) [RelopEqualEqual]
                            SingleExpression(
                              TermFactor(
                                ConstantCharacter(
                                 #
                                ) [ConstantCharacter]
                              ) [TermFactor]
                            ) [SingleExpression]
                          ) [CondFactExpressionRelopExpression]
                        ) [ConditionFacts]
                        CondFactExpressionRelopExpression(
                          SingleExpression(
                            TermFactor(
                              DesignatorEmpty(
                                DesignatorNode(
                                  SingleIdentExpr(
                                   a
                                  ) [SingleIdentExpr]
                                ) [DesignatorNode]
                              ) [DesignatorEmpty]
                            ) [TermFactor]
                          ) [SingleExpression]
                          RelopLess(
                          ) [RelopLess]
                          SingleExpression(
                            TermFactor(
                              ConstantNumber(
                               10
                              ) [ConstantNumber]
                            ) [TermFactor]
                          ) [SingleExpression]
                        ) [CondFactExpressionRelopExpression]
                      ) [ConditionFacts]
                    ) [ConditionTermNode]
                  ) [SingleConditionTerm]
                ) [ConditionNode]
              ) [IfConditionNode]
              IfStatementThen(
                InBraceStatement(
                  Statements(
                    NoStatement(
                    ) [NoStatement]
                    DesignatorStatementOnly(
                      DesignatorStatementAssignop(
                        DesignatorNode(
                          SingleIdentExpr(
                           x
                          ) [SingleIdentExpr]
                        ) [DesignatorNode]
                        Assignop(
                        ) [Assignop]
                        SingleExpression(
                          TermFactor(
                            ConstantCharacter(
                             B
                            ) [ConstantCharacter]
                          ) [TermFactor]
                        ) [SingleExpression]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementOnly]
                  ) [Statements]
                ) [InBraceStatement]
              ) [IfStatementThen]
              IfStatementElse(
                DesignatorStatementOnly(
                  DesignatorStatementAssignop(
                    DesignatorNode(
                      SingleIdentExpr(
                       x
                      ) [SingleIdentExpr]
                    ) [DesignatorNode]
                    Assignop(
                    ) [Assignop]
                    SingleExpression(
                      TermFactor(
                        ConstantCharacter(
                         C
                        ) [ConstantCharacter]
                      ) [TermFactor]
                    ) [SingleExpression]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementOnly]
              ) [IfStatementElse]
            ) [IfElseStatement]
          ) [Statements]
          ReturnStatementExpr(
            SingleExpression(
              TermFactor(
                DesignatorEmpty(
                  DesignatorNode(
                    SingleIdentExpr(
                     x
                    ) [SingleIdentExpr]
                  ) [DesignatorNode]
                ) [DesignatorEmpty]
              ) [TermFactor]
            ) [SingleExpression]
          ) [ReturnStatementExpr]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      MethodTypeName(
        VoidType(
        ) [VoidType]
       main
      ) [MethodTypeName]
      NoFormalParam(
      ) [NoFormalParam]
      VarDeclarationList(
        VarDeclarationList(
          NoVarDeclaration(
          ) [NoVarDeclaration]
          VarDeclNode(
            VarDeclType(
              TypeNode(
               int
              ) [TypeNode]
            ) [VarDeclType]
            Variables(
              SingleVariable(
                VariableNoBracket(
                 x
                ) [VariableNoBracket]
              ) [SingleVariable]
              VariableNoBracket(
               i
              ) [VariableNoBracket]
            ) [Variables]
          ) [VarDeclNode]
        ) [VarDeclarationList]
        VarDeclNode(
          VarDeclType(
            TypeNode(
             char
            ) [TypeNode]
          ) [VarDeclType]
          SingleVariable(
            VariableNoBracket(
             c
            ) [VariableNoBracket]
          ) [SingleVariable]
        ) [VarDeclNode]
      ) [VarDeclarationList]
      MethodLBRACE(
      ) [MethodLBRACE]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    NoStatement(
                    ) [NoStatement]
                    DesignatorStatementOnly(
                      DesignatorStatementAssignop(
                        DesignatorNode(
                          SingleIdentExpr(
                           val
                          ) [SingleIdentExpr]
                        ) [DesignatorNode]
                        Assignop(
                        ) [Assignop]
                        SingleExpression(
                          TermFactor(
                            NewType(
                              TypeNode(
                               Table
                              ) [TypeNode]
                            ) [NewType]
                          ) [TermFactor]
                        ) [SingleExpression]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementOnly]
                  ) [Statements]
                  DesignatorStatementOnly(
                    DesignatorStatementAssignop(
                      DesignatorNode(
                        Idents(
                          SingleIdentExpr(
                           val
                          ) [SingleIdentExpr]
                         pos
                        ) [Idents]
                      ) [DesignatorNode]
                      Assignop(
                      ) [Assignop]
                      SingleExpression(
                        TermFactor(
                          NewArray(
                            NewArrayType(
                              TypeNode(
                               int
                              ) [TypeNode]
                            ) [NewArrayType]
                            SingleExpression(
                              TermFactor(
                                DesignatorEmpty(
                                  DesignatorNode(
                                    SingleIdentExpr(
                                     size
                                    ) [SingleIdentExpr]
                                  ) [DesignatorNode]
                                ) [DesignatorEmpty]
                              ) [TermFactor]
                            ) [SingleExpression]
                          ) [NewArray]
                        ) [TermFactor]
                      ) [SingleExpression]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementOnly]
                ) [Statements]
                DesignatorStatementOnly(
                  DesignatorStatementAssignop(
                    DesignatorNode(
                      Idents(
                        SingleIdentExpr(
                         val
                        ) [SingleIdentExpr]
                       neg
                      ) [Idents]
                    ) [DesignatorNode]
                    Assignop(
                    ) [Assignop]
                    SingleExpression(
                      TermFactor(
                        NewArray(
                          NewArrayType(
                            TypeNode(
                             int
                            ) [TypeNode]
                          ) [NewArrayType]
                          SingleExpression(
                            TermFactor(
                              DesignatorEmpty(
                                DesignatorNode(
                                  SingleIdentExpr(
                                   size
                                  ) [SingleIdentExpr]
                                ) [DesignatorNode]
                              ) [DesignatorEmpty]
                            ) [TermFactor]
                          ) [SingleExpression]
                        ) [NewArray]
                      ) [TermFactor]
                    ) [SingleExpression]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementOnly]
              ) [Statements]
              ForStatement(
                ForHeader(
                  ForStatement1(
                    DesignatorStatementNotNull(
                      DesignatorStatementAssignop(
                        DesignatorNode(
                          SingleIdentExpr(
                           i
                          ) [SingleIdentExpr]
                        ) [DesignatorNode]
                        Assignop(
                        ) [Assignop]
                        SingleExpression(
                          TermFactor(
                            ConstantNumber(
                             1
                            ) [ConstantNumber]
                          ) [TermFactor]
                        ) [SingleExpression]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementNotNull]
                  ) [ForStatement1]
                  ForCondition(
                    ConditionNotNull(
                      ConditionNode(
                        SingleConditionTerm(
                          ConditionTermNode(
                            SingleConditionFact(
                              CondFactExpressionRelopExpression(
                                SingleExpression(
                                  TermFactor(
                                    DesignatorEmpty(
                                      DesignatorNode(
                                        SingleIdentExpr(
                                         i
                                        ) [SingleIdentExpr]
                                      ) [DesignatorNode]
                                    ) [DesignatorEmpty]
                                  ) [TermFactor]
                                ) [SingleExpression]
                                RelopLessEqual(
                                ) [RelopLessEqual]
                                SingleExpression(
                                  TermFactor(
                                    DesignatorEmpty(
                                      DesignatorNode(
                                        SingleIdentExpr(
                                         size
                                        ) [SingleIdentExpr]
                                      ) [DesignatorNode]
                                    ) [DesignatorEmpty]
                                  ) [TermFactor]
                                ) [SingleExpression]
                              ) [CondFactExpressionRelopExpression]
                            ) [SingleConditionFact]
                          ) [ConditionTermNode]
                        ) [SingleConditionTerm]
                      ) [ConditionNode]
                    ) [ConditionNotNull]
                  ) [ForCondition]
                  ForStatement2(
                    DesignatorStatementNotNull(
                      DesignatorStatementPlusPlus(
                        DesignatorNode(
                          SingleIdentExpr(
                           i
                          ) [SingleIdentExpr]
                        ) [DesignatorNode]
                      ) [DesignatorStatementPlusPlus]
                    ) [DesignatorStatementNotNull]
                  ) [ForStatement2]
                ) [ForHeader]
                InBraceStatement(
                  Statements(
                    Statements(
                      NoStatement(
                      ) [NoStatement]
                      DesignatorStatementOnly(
                        DesignatorStatementActPars(
                          DesignatorNode(
                            Idents(
                              SingleIdentExpr(
                               val
                              ) [SingleIdentExpr]
                             putp
                            ) [Idents]
                          ) [DesignatorNode]
                          ActParsNode(
                            ActualParametres(
                              SingleActualParam(
                                SingleExpression(
                                  TermNode(
                                    TermFactor(
                                      DesignatorEmpty(
                                        DesignatorNode(
                                          SingleIdentExpr(
                                           i
                                          ) [SingleIdentExpr]
                                        ) [DesignatorNode]
                                      ) [DesignatorEmpty]
                                    ) [TermFactor]
                                    MulopMul(
                                    ) [MulopMul]
                                    ConstantNumber(
                                     100
                                    ) [ConstantNumber]
                                  ) [TermNode]
                                ) [SingleExpression]
                              ) [SingleActualParam]
                              SingleExpression(
                                TermFactor(
                                  DesignatorEmpty(
                                    DesignatorNode(
                                      SingleIdentExpr(
                                       i
                                      ) [SingleIdentExpr]
                                    ) [DesignatorNode]
                                  ) [DesignatorEmpty]
                                ) [TermFactor]
                              ) [SingleExpression]
                            ) [ActualParametres]
                          ) [ActParsNode]
                        ) [DesignatorStatementActPars]
                      ) [DesignatorStatementOnly]
                    ) [Statements]
                    DesignatorStatementOnly(
                      DesignatorStatementActPars(
                        DesignatorNode(
                          Idents(
                            SingleIdentExpr(
                             val
                            ) [SingleIdentExpr]
                           putn
                          ) [Idents]
                        ) [DesignatorNode]
                        ActParsNode(
                          ActualParametres(
                            SingleActualParam(
                              SingleExpression(
                                TermNode(
                                  TermFactor(
                                    DesignatorEmpty(
                                      DesignatorNode(
                                        SingleIdentExpr(
                                         i
                                        ) [SingleIdentExpr]
                                      ) [DesignatorNode]
                                    ) [DesignatorEmpty]
                                  ) [TermFactor]
                                  MulopMul(
                                  ) [MulopMul]
                                  ConstantNumber(
                                   100
                                  ) [ConstantNumber]
                                ) [TermNode]
                              ) [SingleExpression]
                            ) [SingleActualParam]
                            SingleExpression(
                              TermFactor(
                                DesignatorEmpty(
                                  DesignatorNode(
                                    SingleIdentExpr(
                                     i
                                    ) [SingleIdentExpr]
                                  ) [DesignatorNode]
                                ) [DesignatorEmpty]
                              ) [TermFactor]
                            ) [SingleExpression]
                          ) [ActualParametres]
                        ) [ActParsNode]
                      ) [DesignatorStatementActPars]
                    ) [DesignatorStatementOnly]
                  ) [Statements]
                ) [InBraceStatement]
              ) [ForStatement]
            ) [Statements]
            PrintStatement(
              SingleExpression(
                TermFactor(
                  DesignatorBraceActPars(
                    DesignatorNode(
                      SingleIdentExpr(
                       funkc
                      ) [SingleIdentExpr]
                    ) [DesignatorNode]
                    ActParsNode(
                      ActualParametres(
                        ActualParametres(
                          SingleActualParam(
                            SingleExpression(
                              TermFactor(
                                ConstantNumber(
                                 1
                                ) [ConstantNumber]
                              ) [TermFactor]
                            ) [SingleExpression]
                          ) [SingleActualParam]
                          SingleExpression(
                            TermFactor(
                              ConstantCharacter(
                               #
                              ) [ConstantCharacter]
                            ) [TermFactor]
                          ) [SingleExpression]
                        ) [ActualParametres]
                        SingleExpression(
                          TermFactor(
                            ConstantNumber(
                             1
                            ) [ConstantNumber]
                          ) [TermFactor]
                        ) [SingleExpression]
                      ) [ActualParametres]
                    ) [ActParsNode]
                  ) [DesignatorBraceActPars]
                ) [TermFactor]
              ) [SingleExpression]
            ) [PrintStatement]
          ) [Statements]
          ReadStatement(
            DesignatorNode(
              SingleIdentExpr(
               x
              ) [SingleIdentExpr]
            ) [DesignatorNode]
          ) [ReadStatement]
        ) [Statements]
        ForStatement(
          ForHeader(
            ForStatement1(
              DesignatorStatementNull(
              ) [DesignatorStatementNull]
            ) [ForStatement1]
            ForCondition(
              ConditionNull(
              ) [ConditionNull]
            ) [ForCondition]
            ForStatement2(
              DesignatorStatementNull(
              ) [DesignatorStatementNull]
            ) [ForStatement2]
          ) [ForHeader]
          InBraceStatement(
            Statements(
              Statements(
                NoStatement(
                ) [NoStatement]
                IfElseStatement(
                  IfConditionNode(
                    ConditionNode(
                      SingleConditionTerm(
                        ConditionTermNode(
                          ConditionFacts(
                            SingleConditionFact(
                              CondFactExpressionRelopExpression(
                                SingleExpression(
                                  TermFactor(
                                    DesignatorEmpty(
                                      DesignatorNode(
                                        Idents(
                                          SingleIdentExpr(
                                           Num
                                          ) [SingleIdentExpr]
                                         ZERO
                                        ) [Idents]
                                      ) [DesignatorNode]
                                    ) [DesignatorEmpty]
                                  ) [TermFactor]
                                ) [SingleExpression]
                                RelopLessEqual(
                                ) [RelopLessEqual]
                                SingleExpression(
                                  TermFactor(
                                    DesignatorEmpty(
                                      DesignatorNode(
                                        SingleIdentExpr(
                                         x
                                        ) [SingleIdentExpr]
                                      ) [DesignatorNode]
                                    ) [DesignatorEmpty]
                                  ) [TermFactor]
                                ) [SingleExpression]
                              ) [CondFactExpressionRelopExpression]
                            ) [SingleConditionFact]
                            CondFactExpressionRelopExpression(
                              SingleExpression(
                                TermFactor(
                                  DesignatorEmpty(
                                    DesignatorNode(
                                      SingleIdentExpr(
                                       x
                                      ) [SingleIdentExpr]
                                    ) [DesignatorNode]
                                  ) [DesignatorEmpty]
                                ) [TermFactor]
                              ) [SingleExpression]
                              RelopLess(
                              ) [RelopLess]
                              SingleExpression(
                                TermFactor(
                                  DesignatorEmpty(
                                    DesignatorNode(
                                      SingleIdentExpr(
                                       size
                                      ) [SingleIdentExpr]
                                    ) [DesignatorNode]
                                  ) [DesignatorEmpty]
                                ) [TermFactor]
                              ) [SingleExpression]
                            ) [CondFactExpressionRelopExpression]
                          ) [ConditionFacts]
                        ) [ConditionTermNode]
                      ) [SingleConditionTerm]
                    ) [ConditionNode]
                  ) [IfConditionNode]
                  IfStatementThen(
                    InBraceStatement(
                      Statements(
                        NoStatement(
                        ) [NoStatement]
                        DesignatorStatementOnly(
                          DesignatorStatementActPars(
                            DesignatorNode(
                              Idents(
                                SingleIdentExpr(
                                 val
                                ) [SingleIdentExpr]
                               putp
                              ) [Idents]
                            ) [DesignatorNode]
                            ActParsNode(
                              ActualParametres(
                                SingleActualParam(
                                  ExpressionNode(
                                    SingleExpression(
                                      TermFactor(
                                        DesignatorBraceActPars(
                                          DesignatorNode(
                                            Idents(
                                              SingleIdentExpr(
                                               val
                                              ) [SingleIdentExpr]
                                             getp
                                            ) [Idents]
                                          ) [DesignatorNode]
                                          ActParsNode(
                                            SingleActualParam(
                                              SingleExpression(
                                                TermFactor(
                                                  DesignatorEmpty(
                                                    DesignatorNode(
                                                      SingleIdentExpr(
                                                       x
                                                      ) [SingleIdentExpr]
                                                    ) [DesignatorNode]
                                                  ) [DesignatorEmpty]
                                                ) [TermFactor]
                                              ) [SingleExpression]
                                            ) [SingleActualParam]
                                          ) [ActParsNode]
                                        ) [DesignatorBraceActPars]
                                      ) [TermFactor]
                                    ) [SingleExpression]
                                    AddopPlus(
                                    ) [AddopPlus]
                                    TermFactor(
                                      DesignatorEmpty(
                                        DesignatorNode(
                                          Idents(
                                            SingleIdentExpr(
                                             Num
                                            ) [SingleIdentExpr]
                                           ONE
                                          ) [Idents]
                                        ) [DesignatorNode]
                                      ) [DesignatorEmpty]
                                    ) [TermFactor]
                                  ) [ExpressionNode]
                                ) [SingleActualParam]
                                SingleExpression(
                                  TermFactor(
                                    ConstantNumber(
                                     0
                                    ) [ConstantNumber]
                                  ) [TermFactor]
                                ) [SingleExpression]
                              ) [ActualParametres]
                            ) [ActParsNode]
                          ) [DesignatorStatementActPars]
                        ) [DesignatorStatementOnly]
                      ) [Statements]
                    ) [InBraceStatement]
                  ) [IfStatementThen]
                  IfStatementElse(
                    IfStatement(
                      IfConditionNode(
                        ConditionNode(
                          SingleConditionTerm(
                            ConditionTermNode(
                              ConditionFacts(
                                SingleConditionFact(
                                  CondFactExpressionRelopExpression(
                                    SingleExpressionMinus(
                                      TermFactor(
                                        DesignatorEmpty(
                                          DesignatorNode(
                                            SingleIdentExpr(
                                             size
                                            ) [SingleIdentExpr]
                                          ) [DesignatorNode]
                                        ) [DesignatorEmpty]
                                      ) [TermFactor]
                                    ) [SingleExpressionMinus]
                                    RelopLess(
                                    ) [RelopLess]
                                    SingleExpression(
                                      TermFactor(
                                        DesignatorEmpty(
                                          DesignatorNode(
                                            SingleIdentExpr(
                                             x
                                            ) [SingleIdentExpr]
                                          ) [DesignatorNode]
                                        ) [DesignatorEmpty]
                                      ) [TermFactor]
                                    ) [SingleExpression]
                                  ) [CondFactExpressionRelopExpression]
                                ) [SingleConditionFact]
                                CondFactExpressionRelopExpression(
                                  SingleExpression(
                                    TermFactor(
                                      DesignatorEmpty(
                                        DesignatorNode(
                                          SingleIdentExpr(
                                           x
                                          ) [SingleIdentExpr]
                                        ) [DesignatorNode]
                                      ) [DesignatorEmpty]
                                    ) [TermFactor]
                                  ) [SingleExpression]
                                  RelopLess(
                                  ) [RelopLess]
                                  SingleExpression(
                                    TermFactor(
                                      ConstantNumber(
                                       0
                                      ) [ConstantNumber]
                                    ) [TermFactor]
                                  ) [SingleExpression]
                                ) [CondFactExpressionRelopExpression]
                              ) [ConditionFacts]
                            ) [ConditionTermNode]
                          ) [SingleConditionTerm]
                        ) [ConditionNode]
                      ) [IfConditionNode]
                      IfStatementThen(
                        InBraceStatement(
                          Statements(
                            NoStatement(
                            ) [NoStatement]
                            DesignatorStatementOnly(
                              DesignatorStatementActPars(
                                DesignatorNode(
                                  Idents(
                                    SingleIdentExpr(
                                     val
                                    ) [SingleIdentExpr]
                                   putn
                                  ) [Idents]
                                ) [DesignatorNode]
                                ActParsNode(
                                  ActualParametres(
                                    SingleActualParam(
                                      ExpressionNode(
                                        SingleExpression(
                                          TermFactor(
                                            DesignatorBraceActPars(
                                              DesignatorNode(
                                                Idents(
                                                  SingleIdentExpr(
                                                   val
                                                  ) [SingleIdentExpr]
                                                 getn
                                                ) [Idents]
                                              ) [DesignatorNode]
                                              ActParsNode(
                                                SingleActualParam(
                                                  SingleExpressionMinus(
                                                    TermFactor(
                                                      DesignatorEmpty(
                                                        DesignatorNode(
                                                          SingleIdentExpr(
                                                           x
                                                          ) [SingleIdentExpr]
                                                        ) [DesignatorNode]
                                                      ) [DesignatorEmpty]
                                                    ) [TermFactor]
                                                  ) [SingleExpressionMinus]
                                                ) [SingleActualParam]
                                              ) [ActParsNode]
                                            ) [DesignatorBraceActPars]
                                          ) [TermFactor]
                                        ) [SingleExpression]
                                        AddopPlus(
                                        ) [AddopPlus]
                                        TermFactor(
                                          ConstantNumber(
                                           1
                                          ) [ConstantNumber]
                                        ) [TermFactor]
                                      ) [ExpressionNode]
                                    ) [SingleActualParam]
                                    SingleExpression(
                                      TermFactor(
                                        ConstantNumber(
                                         0
                                        ) [ConstantNumber]
                                      ) [TermFactor]
                                    ) [SingleExpression]
                                  ) [ActualParametres]
                                ) [ActParsNode]
                              ) [DesignatorStatementActPars]
                            ) [DesignatorStatementOnly]
                          ) [Statements]
                        ) [InBraceStatement]
                      ) [IfStatementThen]
                    ) [IfStatement]
                  ) [IfStatementElse]
                ) [IfElseStatement]
              ) [Statements]
              ReadStatement(
                DesignatorNode(
                  SingleIdentExpr(
                   x
                  ) [SingleIdentExpr]
                ) [DesignatorNode]
              ) [ReadStatement]
            ) [Statements]
          ) [InBraceStatement]
        ) [ForStatement]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  02:53:32,619 - ===================================
INFO  02:53:32,623 - Definisana konstanta (10)size na liniji 3
INFO  02:53:32,623 - Definisana konstanta (97)k na liniji 4
INFO  02:53:32,623 - Deklarisana single promenljiva a na liniji 5
INFO  02:53:32,623 - Deklarisana single promenljiva b na liniji 5
INFO  02:53:32,623 - Deklarisana single promenljiva c na liniji 5
INFO  02:53:32,623 - Deklarisana single promenljiva e na liniji 6
INFO  02:53:32,623 - Deklarisana single promenljiva f na liniji 6
INFO  02:53:32,623 - Deklarisana single promenljiva g na liniji 7
INFO  02:53:32,623 - Deklarisan novi enum tip: Num na liniji 9
INFO  02:53:32,624 - Definisana enum konstanta ZERO sa vrednoscu 0 na liniji 9
INFO  02:53:32,624 - Definisana enum konstanta ONE sa vrednoscu 1 na liniji 9
INFO  02:53:32,624 - Definisana enum konstanta TEN sa vrednoscu 10 na liniji 9
INFO  02:53:32,624 - Deklarisan novi interfejs: I na liniji 11
INFO  02:53:32,624 - Deklarisanp array polje pos na liniji 16
INFO  02:53:32,624 - Deklarisanp array polje neg na liniji 16
INFO  02:53:32,624 - Deklarisana metoda putp u okviru klase Table na liniji 18
INFO  02:53:32,624 - Deklarisan single argument a na liniji 18
INFO  02:53:32,624 - Deklarisan single argument idx na liniji 18
INFO  02:53:32,625 - Pronadjen poziv promenljive [Var idx: int, 1, 1 ] na liniji 18
INFO  02:53:32,625 - Pronadjen poziv promenljive [Var a: int, 0, 1 ] na liniji 18
INFO  02:53:32,625 - Dodela vrednosti za $elem na liniji 18
INFO  02:53:32,625 - Deklarisana metoda putn u okviru klase Table na liniji 19
INFO  02:53:32,625 - Deklarisan single argument a na liniji 19
INFO  02:53:32,625 - Deklarisan single argument idx na liniji 19
INFO  02:53:32,625 - Pronadjen poziv promenljive [Var idx: int, 1, 1 ] na liniji 19
INFO  02:53:32,625 - Pronadjen poziv promenljive [Var a: int, 0, 1 ] na liniji 19
INFO  02:53:32,625 - Dodela vrednosti za $elem na liniji 19
INFO  02:53:32,625 - Deklarisana metoda getp u okviru klase Table na liniji 20
INFO  02:53:32,625 - Deklarisan single argument idx na liniji 20
INFO  02:53:32,626 - Pronadjen poziv promenljive [Var idx: int, 0, 1 ] na liniji 20
INFO  02:53:32,626 - Pronadjen poziv promenljive [$elem: int, -1, -1 ] na liniji 20
INFO  02:53:32,626 - Deklarisana metoda getn u okviru klase Table na liniji 21
INFO  02:53:32,626 - Deklarisan single argument idx na liniji 21
INFO  02:53:32,626 - Pronadjen poziv promenljive [Var idx: int, 0, 1 ] na liniji 21
INFO  02:53:32,626 - Pronadjen poziv promenljive [$elem: int, -1, -1 ] na liniji 21
INFO  02:53:32,626 - Deklarisana nova klasa: Table na liniji 15
INFO  02:53:32,626 - Deklarisana single promenljiva val na liniji 24
INFO  02:53:32,626 - Definisana funkcija funkc na liniji 27
INFO  02:53:32,626 - Deklarisan single argument a na liniji 27
INFO  02:53:32,626 - Deklarisan single argument b na liniji 27
INFO  02:53:32,626 - Deklarisan single argument c na liniji 27
INFO  02:53:32,626 - Deklarisana single promenljiva x na liniji 28
INFO  02:53:32,626 - Pronadjen poziv promenljive [Var a: int, 0, 1 ] na liniji 30
INFO  02:53:32,626 - Pronadjen poziv promenljive [Con eol: char, 10, 0 ] na liniji 31
INFO  02:53:32,626 - Pronadjen poziv promenljive [Var b: char, 1, 1 ] na liniji 32
INFO  02:53:32,626 - Pronadjen poziv promenljive [Con eol: char, 10, 0 ] na liniji 33
INFO  02:53:32,626 - Dodela vrednosti za x na liniji 35
INFO  02:53:32,626 - Pronadjen poziv promenljive [Var c: bool, 2, 1 ] na liniji 36
INFO  02:53:32,626 - Pronadjen poziv promenljive [Var b: char, 1, 1 ] na liniji 36
INFO  02:53:32,626 - Pronadjen poziv promenljive [Var a: int, 0, 1 ] na liniji 36
INFO  02:53:32,626 - Dodela vrednosti za x na liniji 37
INFO  02:53:32,626 - Dodela vrednosti za x na liniji 39
INFO  02:53:32,626 - Pronadjen poziv promenljive [Var x: char, 3, 1 ] na liniji 41
INFO  02:53:32,626 - Definisana funkcija main na liniji 44
INFO  02:53:32,626 - Deklarisana single promenljiva x na liniji 45
INFO  02:53:32,626 - Deklarisana single promenljiva i na liniji 45
INFO  02:53:32,626 - Deklarisana single promenljiva c na liniji 45
INFO  02:53:32,627 - Dodela vrednosti za val na liniji 48
INFO  02:53:32,627 - Izabrano polje : .pos
INFO  02:53:32,627 - Pronadjen poziv promenljive [Con size: int, 10, 0 ] na liniji 49
INFO  02:53:32,627 - Dodela vrednosti za pos na liniji 49
INFO  02:53:32,627 - Izabrano polje : .neg
INFO  02:53:32,627 - Pronadjen poziv promenljive [Con size: int, 10, 0 ] na liniji 50
INFO  02:53:32,627 - Dodela vrednosti za neg na liniji 50
INFO  02:53:32,627 - Dodela vrednosti za i na liniji 51
INFO  02:53:32,627 - Pronadjen poziv promenljive [Var i: int, 1, 1 ] na liniji 51
INFO  02:53:32,627 - Pronadjen poziv promenljive [Con size: int, 10, 0 ] na liniji 51
INFO  02:53:32,627 - Izabrano polje : .putp
INFO  02:53:32,627 - Pronadjen poziv promenljive [Var i: int, 1, 1 ] na liniji 53
INFO  02:53:32,627 - Pronadjen poziv promenljive [Var i: int, 1, 1 ] na liniji 53
INFO  02:53:32,627 - Pronadjen poziv funkcije putp sa 2/2 argumenta na liniji 53
INFO  02:53:32,627 - Izabrano polje : .putn
INFO  02:53:32,627 - Pronadjen poziv promenljive [Var i: int, 1, 1 ] na liniji 54
INFO  02:53:32,627 - Pronadjen poziv promenljive [Var i: int, 1, 1 ] na liniji 54
INFO  02:53:32,627 - Pronadjen poziv funkcije putn sa 2/2 argumenta na liniji 54
INFO  02:53:32,627 - Pronadjen poziv funkcije funkc sa 3/4 argumenta na liniji 56
ERROR 02:53:32,627 - Greska na liniji 56 : funkcija funkc nema korektne argumente!
INFO  02:53:32,627 - Izabrano polje : .ZERO
INFO  02:53:32,627 - Pronadjen poziv promenljive [Con ZERO: int, 0, 1 ] na liniji 62
INFO  02:53:32,627 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 62
INFO  02:53:32,627 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 62
INFO  02:53:32,627 - Pronadjen poziv promenljive [Con size: int, 10, 0 ] na liniji 62
INFO  02:53:32,627 - Izabrano polje : .putp
INFO  02:53:32,627 - Izabrano polje : .getp
INFO  02:53:32,627 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 64
INFO  02:53:32,627 - Pronadjen poziv funkcije getp sa 1/1 argumenta na liniji 64
INFO  02:53:32,627 - Izabrano polje : .ONE
INFO  02:53:32,627 - Pronadjen poziv promenljive [Con ONE: int, 1, 1 ] na liniji 64
INFO  02:53:32,627 - Pronadjen poziv funkcije putp sa 2/2 argumenta na liniji 64
INFO  02:53:32,627 - Pronadjen poziv promenljive [Con size: int, 10, 0 ] na liniji 66
INFO  02:53:32,627 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 66
INFO  02:53:32,627 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 66
INFO  02:53:32,628 - Izabrano polje : .putn
INFO  02:53:32,628 - Izabrano polje : .getn
INFO  02:53:32,628 - Pronadjen poziv promenljive [Var x: int, 0, 1 ] na liniji 68
INFO  02:53:32,628 - Pronadjen poziv funkcije getn sa 1/1 argumenta na liniji 68
INFO  02:53:32,628 - Pronadjen poziv funkcije putn sa 2/2 argumenta na liniji 68
INFO  02:53:32,628 - main funkcija je korektna.  na liniji 44
INFO  02:53:32,628 - ===================================
ERROR 02:53:32,628 - Parsiranje NIJE uspesno zavrseno!
