INFO  04:14:28,703 - Putanja iz argumenta: test/program.mj
INFO  04:14:28,703 - Compiling source file: D:\ETF\PP1\Projekat\workspace\MJCompiler\test\program.mj
INFO  04:14:28,739 - #2 program
INFO  04:14:28,740 - #45 Program
INFO  04:14:28,740 - #5 interface
INFO  04:14:28,741 - #45 I
INFO  04:14:28,741 - #12 {
INFO  04:14:28,741 - #39 void
INFO  04:14:28,741 - #45 m
INFO  04:14:28,742 - #16 (
INFO  04:14:28,742 - #17 )
INFO  04:14:28,742 - #18 ;
INFO  04:14:28,742 - #13 }
INFO  04:14:28,743 - #4 class
INFO  04:14:28,743 - #45 A
INFO  04:14:28,743 - #12 {
INFO  04:14:28,744 - #45 int
INFO  04:14:28,744 - #45 x
INFO  04:14:28,744 - #14 [
INFO  04:14:28,744 - #15 ]
INFO  04:14:28,745 - #19 ,
INFO  04:14:28,745 - #45 y
INFO  04:14:28,745 - #14 [
INFO  04:14:28,745 - #15 ]
INFO  04:14:28,745 - #18 ;
INFO  04:14:28,745 - #13 }
INFO  04:14:28,745 - #8 const
INFO  04:14:28,745 - #45 int
INFO  04:14:28,746 - #45 pi
INFO  04:14:28,746 - #26 =
INFO  04:14:28,746 - #44 3
INFO  04:14:28,746 - #19 ,
INFO  04:14:28,746 - #45 e
INFO  04:14:28,746 - #26 =
INFO  04:14:28,746 - #44 2
INFO  04:14:28,746 - #18 ;
INFO  04:14:28,746 - #6 enum
INFO  04:14:28,747 - #45 Broj
INFO  04:14:28,747 - #12 {
INFO  04:14:28,747 - #45 NULA
INFO  04:14:28,747 - #19 ,
INFO  04:14:28,747 - #45 TRI
INFO  04:14:28,747 - #26 =
INFO  04:14:28,747 - #44 3
INFO  04:14:28,747 - #19 ,
INFO  04:14:28,747 - #45 PET
INFO  04:14:28,747 - #26 =
INFO  04:14:28,748 - #44 5
INFO  04:14:28,748 - #13 }
INFO  04:14:28,748 - #4 class
INFO  04:14:28,748 - #45 B
INFO  04:14:28,748 - #41 extends
INFO  04:14:28,748 - #45 A
INFO  04:14:28,748 - #42 implements
INFO  04:14:28,748 - #45 I
INFO  04:14:28,748 - #12 {
INFO  04:14:28,749 - #45 int
INFO  04:14:28,749 - #45 i
INFO  04:14:28,749 - #18 ;
INFO  04:14:28,749 - #45 int
INFO  04:14:28,749 - #45 x
INFO  04:14:28,749 - #14 [
INFO  04:14:28,749 - #15 ]
INFO  04:14:28,749 - #18 ;
INFO  04:14:28,749 - #12 {
INFO  04:14:28,749 - #45 int
INFO  04:14:28,750 - #45 getValue
INFO  04:14:28,750 - #16 (
INFO  04:14:28,750 - #45 int
INFO  04:14:28,752 - #45 a
INFO  04:14:28,752 - #17 )
INFO  04:14:28,753 - #45 int
INFO  04:14:28,753 - #45 b
INFO  04:14:28,753 - #18 ;
INFO  04:14:28,753 - #45 bool
INFO  04:14:28,753 - #45 c
INFO  04:14:28,753 - #18 ;
INFO  04:14:28,753 - #12 {
INFO  04:14:28,754 - #38 return
INFO  04:14:28,754 - #45 this
INFO  04:14:28,754 - #20 .
INFO  04:14:28,754 - #45 i
INFO  04:14:28,754 - #21 +
INFO  04:14:28,755 - #45 this
INFO  04:14:28,755 - #20 .
INFO  04:14:28,755 - #45 x
INFO  04:14:28,755 - #14 [
INFO  04:14:28,755 - #44 0
INFO  04:14:28,755 - #15 ]
INFO  04:14:28,756 - #21 +
INFO  04:14:28,756 - #45 a
INFO  04:14:28,756 - #18 ;
INFO  04:14:28,756 - #13 }
INFO  04:14:28,756 - #39 void
INFO  04:14:28,757 - #45 m
INFO  04:14:28,757 - #16 (
INFO  04:14:28,757 - #17 )
INFO  04:14:28,757 - #12 {
INFO  04:14:28,757 - #13 }
INFO  04:14:28,757 - #13 }
INFO  04:14:28,757 - #13 }
INFO  04:14:28,757 - #4 class
INFO  04:14:28,757 - #45 C
INFO  04:14:28,757 - #41 extends
INFO  04:14:28,757 - #45 B
INFO  04:14:28,757 - #12 {
INFO  04:14:28,757 - #45 A
INFO  04:14:28,757 - #45 theA
INFO  04:14:28,757 - #18 ;
INFO  04:14:28,757 - #45 int
INFO  04:14:28,758 - #45 a
INFO  04:14:28,758 - #18 ;
INFO  04:14:28,758 - #13 }
INFO  04:14:28,758 - #12 {
INFO  04:14:28,758 - #39 void
INFO  04:14:28,758 - #45 main
INFO  04:14:28,758 - #16 (
INFO  04:14:28,758 - #17 )
INFO  04:14:28,758 - #45 A
INFO  04:14:28,758 - #45 a
INFO  04:14:28,758 - #18 ;
INFO  04:14:28,758 - #45 C
INFO  04:14:28,758 - #45 c
INFO  04:14:28,758 - #18 ;
INFO  04:14:28,758 - #45 int
INFO  04:14:28,758 - #45 i
INFO  04:14:28,758 - #18 ;
INFO  04:14:28,758 - #45 int
INFO  04:14:28,759 - #45 x
INFO  04:14:28,759 - #14 [
INFO  04:14:28,759 - #15 ]
INFO  04:14:28,759 - #18 ;
INFO  04:14:28,759 - #12 {
INFO  04:14:28,759 - #45 a
INFO  04:14:28,759 - #26 =
INFO  04:14:28,759 - #10 new
INFO  04:14:28,759 - #45 A
INFO  04:14:28,759 - #18 ;
INFO  04:14:28,759 - #45 a
INFO  04:14:28,759 - #20 .
INFO  04:14:28,759 - #45 x
INFO  04:14:28,759 - #26 =
INFO  04:14:28,759 - #10 new
INFO  04:14:28,759 - #45 int
INFO  04:14:28,760 - #14 [
INFO  04:14:28,760 - #45 Broj
INFO  04:14:28,760 - #20 .
INFO  04:14:28,760 - #45 PET
INFO  04:14:28,760 - #15 ]
INFO  04:14:28,760 - #18 ;
INFO  04:14:28,760 - #45 a
INFO  04:14:28,760 - #20 .
INFO  04:14:28,760 - #45 y
INFO  04:14:28,760 - #26 =
INFO  04:14:28,760 - #10 new
INFO  04:14:28,760 - #45 int
INFO  04:14:28,760 - #14 [
INFO  04:14:28,760 - #44 5
INFO  04:14:28,760 - #15 ]
INFO  04:14:28,760 - #18 ;
INFO  04:14:28,760 - #45 c
INFO  04:14:28,760 - #26 =
INFO  04:14:28,760 - #10 new
INFO  04:14:28,760 - #45 C
INFO  04:14:28,760 - #18 ;
INFO  04:14:28,761 - #45 c
INFO  04:14:28,761 - #20 .
INFO  04:14:28,761 - #45 theA
INFO  04:14:28,761 - #26 =
INFO  04:14:28,761 - #45 a
INFO  04:14:28,761 - #18 ;
INFO  04:14:28,761 - #45 c
INFO  04:14:28,761 - #20 .
INFO  04:14:28,761 - #45 x
INFO  04:14:28,761 - #26 =
INFO  04:14:28,761 - #10 new
INFO  04:14:28,761 - #45 int
INFO  04:14:28,761 - #14 [
INFO  04:14:28,761 - #44 5
INFO  04:14:28,761 - #15 ]
INFO  04:14:28,761 - #18 ;
INFO  04:14:28,761 - #45 x
INFO  04:14:28,761 - #26 =
INFO  04:14:28,761 - #10 new
INFO  04:14:28,761 - #45 int
INFO  04:14:28,761 - #14 [
INFO  04:14:28,761 - #45 Broj
INFO  04:14:28,761 - #20 .
INFO  04:14:28,761 - #45 TRI
INFO  04:14:28,761 - #15 ]
INFO  04:14:28,761 - #18 ;
INFO  04:14:28,761 - #37 read
INFO  04:14:28,761 - #16 (
INFO  04:14:28,761 - #45 c
INFO  04:14:28,761 - #20 .
INFO  04:14:28,761 - #45 i
INFO  04:14:28,761 - #17 )
INFO  04:14:28,761 - #18 ;
INFO  04:14:28,761 - #40 for
INFO  04:14:28,762 - #16 (
INFO  04:14:28,762 - #45 i
INFO  04:14:28,762 - #26 =
INFO  04:14:28,762 - #44 0
INFO  04:14:28,762 - #18 ;
INFO  04:14:28,762 - #45 i
INFO  04:14:28,762 - #33 <
INFO  04:14:28,762 - #44 5
INFO  04:14:28,763 - #18 ;
INFO  04:14:28,763 - #45 i
INFO  04:14:28,763 - #27 ++
INFO  04:14:28,763 - #17 )
INFO  04:14:28,764 - #12 {
INFO  04:14:28,764 - #37 read
INFO  04:14:28,764 - #16 (
INFO  04:14:28,764 - #45 c
INFO  04:14:28,764 - #20 .
INFO  04:14:28,764 - #45 x
INFO  04:14:28,764 - #14 [
INFO  04:14:28,764 - #45 i
INFO  04:14:28,764 - #15 ]
INFO  04:14:28,764 - #17 )
INFO  04:14:28,764 - #18 ;
INFO  04:14:28,765 - #37 read
INFO  04:14:28,765 - #16 (
INFO  04:14:28,765 - #45 c
INFO  04:14:28,765 - #20 .
INFO  04:14:28,765 - #45 theA
INFO  04:14:28,765 - #20 .
INFO  04:14:28,765 - #45 x
INFO  04:14:28,765 - #14 [
INFO  04:14:28,765 - #45 i
INFO  04:14:28,765 - #15 ]
INFO  04:14:28,765 - #17 )
INFO  04:14:28,765 - #18 ;
INFO  04:14:28,765 - #13 }
INFO  04:14:28,765 - #11 print
INFO  04:14:28,765 - #16 (
INFO  04:14:28,765 - #45 c
INFO  04:14:28,765 - #20 .
INFO  04:14:28,765 - #45 getValue
INFO  04:14:28,765 - #16 (
INFO  04:14:28,765 - #45 c
INFO  04:14:28,765 - #20 .
INFO  04:14:28,765 - #45 theA
INFO  04:14:28,765 - #20 .
INFO  04:14:28,765 - #45 x
INFO  04:14:28,765 - #14 [
INFO  04:14:28,765 - #45 Broj
INFO  04:14:28,765 - #20 .
INFO  04:14:28,765 - #45 NULA
INFO  04:14:28,765 - #15 ]
INFO  04:14:28,765 - #17 )
INFO  04:14:28,766 - #17 )
INFO  04:14:28,766 - #18 ;
INFO  04:14:28,766 - #45 c
INFO  04:14:28,766 - #20 .
INFO  04:14:28,766 - #45 m
INFO  04:14:28,766 - #16 (
INFO  04:14:28,766 - #17 )
INFO  04:14:28,766 - #18 ;
INFO  04:14:28,766 - #13 }
INFO  04:14:28,766 - #13 }
INFO  04:14:28,772 - Program(
  ProgName(
   Program
  ) [ProgName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDecl(
              ) [NoDecl]
              InterfaceDeclaration(
                InterfaceDeclarationNode(
                  InterfaceIdent(
                   I
                  ) [InterfaceIdent]
                  InterfaceMethodDeclarations(
                    NoInterfaceMethodDeclaration(
                    ) [NoInterfaceMethodDeclaration]
                    InterfaceMethodDeclarationWithParams(
                      InterfaceMethodIdent(
                        VoidType(
                        ) [VoidType]
                       m
                      ) [InterfaceMethodIdent]
                      NoFormalParam(
                      ) [NoFormalParam]
                    ) [InterfaceMethodDeclarationWithParams]
                  ) [InterfaceMethodDeclarations]
                ) [InterfaceDeclarationNode]
              ) [InterfaceDeclaration]
            ) [Declarations]
            ClassDeclaration(
              ClassDeclarationWithoutMethods(
                ClassDeclIdent(
                 A
                ) [ClassDeclIdent]
                NoExtension(
                ) [NoExtension]
                NoImplementation(
                ) [NoImplementation]
                ClassVarDeclarationList(
                  NoClassVarDeclaration(
                  ) [NoClassVarDeclaration]
                  ClassVarDeclNode(
                    ClassVarDeclType(
                      TypeNode(
                       int
                      ) [TypeNode]
                    ) [ClassVarDeclType]
                    ClassVariables(
                      SingleClassVariable(
                        VariableBracket(
                         x
                        ) [VariableBracket]
                      ) [SingleClassVariable]
                      VariableBracket(
                       y
                      ) [VariableBracket]
                    ) [ClassVariables]
                  ) [ClassVarDeclNode]
                ) [ClassVarDeclarationList]
              ) [ClassDeclarationWithoutMethods]
            ) [ClassDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclNode(
              ConstDeclType(
                TypeNode(
                 int
                ) [TypeNode]
              ) [ConstDeclType]
              Constants(
                SingleConstant(
                  IdentEqualConstantNode(
                   pi
                    NumberNode(
                     3
                    ) [NumberNode]
                  ) [IdentEqualConstantNode]
                ) [SingleConstant]
                IdentEqualConstantNode(
                 e
                  NumberNode(
                   2
                  ) [NumberNode]
                ) [IdentEqualConstantNode]
              ) [Constants]
            ) [ConstDeclNode]
          ) [ConstDeclaration]
        ) [Declarations]
        EnumDeclaration(
          EnumDeclarationNode(
            EnumIdent(
             Broj
            ) [EnumIdent]
            Enumerations(
              Enumerations(
                SingleEnumeration(
                  EnumerationNoVal(
                   NULA
                  ) [EnumerationNoVal]
                ) [SingleEnumeration]
                EnumerationVal(
                 TRI
                 3
                ) [EnumerationVal]
              ) [Enumerations]
              EnumerationVal(
               PET
               5
              ) [EnumerationVal]
            ) [Enumerations]
          ) [EnumDeclarationNode]
        ) [EnumDeclaration]
      ) [Declarations]
      ClassDeclaration(
        ClassDeclarationWithMethods(
          ClassDeclIdent(
           B
          ) [ClassDeclIdent]
          Extension(
            TypeNode(
             A
            ) [TypeNode]
          ) [Extension]
          Implementation(
            SinglType(
              TypeNode(
               I
              ) [TypeNode]
            ) [SinglType]
          ) [Implementation]
          ClassVarDeclarationList(
            ClassVarDeclarationList(
              NoClassVarDeclaration(
              ) [NoClassVarDeclaration]
              ClassVarDeclNode(
                ClassVarDeclType(
                  TypeNode(
                   int
                  ) [TypeNode]
                ) [ClassVarDeclType]
                SingleClassVariable(
                  VariableNoBracket(
                   i
                  ) [VariableNoBracket]
                ) [SingleClassVariable]
              ) [ClassVarDeclNode]
            ) [ClassVarDeclarationList]
            ClassVarDeclNode(
              ClassVarDeclType(
                TypeNode(
                 int
                ) [TypeNode]
              ) [ClassVarDeclType]
              SingleClassVariable(
                VariableBracket(
                 x
                ) [VariableBracket]
              ) [SingleClassVariable]
            ) [ClassVarDeclNode]
          ) [ClassVarDeclarationList]
          ClassMethodDeclarations(
            ClassMethodDeclarations(
              NoClassMethodDecl(
              ) [NoClassMethodDecl]
              MethodDecl(
                MethodTypeName(
                  NoVoidType(
                    TypeNode(
                     int
                    ) [TypeNode]
                  ) [NoVoidType]
                 getValue
                ) [MethodTypeName]
                FormalParams(
                  SingleFormalParamDecl(
                    FormalParamDeclarationNoBrackets(
                      TypeNode(
                       int
                      ) [TypeNode]
                     a
                    ) [FormalParamDeclarationNoBrackets]
                  ) [SingleFormalParamDecl]
                ) [FormalParams]
                VarDeclarationList(
                  VarDeclarationList(
                    NoVarDeclaration(
                    ) [NoVarDeclaration]
                    VarDeclNode(
                      VarDeclType(
                        TypeNode(
                         int
                        ) [TypeNode]
                      ) [VarDeclType]
                      SingleVariable(
                        VariableNoBracket(
                         b
                        ) [VariableNoBracket]
                      ) [SingleVariable]
                    ) [VarDeclNode]
                  ) [VarDeclarationList]
                  VarDeclNode(
                    VarDeclType(
                      TypeNode(
                       bool
                      ) [TypeNode]
                    ) [VarDeclType]
                    SingleVariable(
                      VariableNoBracket(
                       c
                      ) [VariableNoBracket]
                    ) [SingleVariable]
                  ) [VarDeclNode]
                ) [VarDeclarationList]
                MethodLBRACE(
                ) [MethodLBRACE]
                Statements(
                  NoStatement(
                  ) [NoStatement]
                  ReturnStatementExpr(
                    ExpressionNode(
                      ExpressionNode(
                        SingleExpression(
                          TermFactor(
                            DesignatorEmpty(
                              DesignatorNode(
                                Idents(
                                  SingleIdentExpr(
                                   this
                                  ) [SingleIdentExpr]
                                 i
                                ) [Idents]
                              ) [DesignatorNode]
                            ) [DesignatorEmpty]
                          ) [TermFactor]
                        ) [SingleExpression]
                        AddopPlus(
                        ) [AddopPlus]
                        TermFactor(
                          DesignatorEmpty(
                            DesignatorNode(
                              Exprs(
                                IdentExprListArray(
                                  Idents(
                                    SingleIdentExpr(
                                     this
                                    ) [SingleIdentExpr]
                                   x
                                  ) [Idents]
                                ) [IdentExprListArray]
                                SingleExpression(
                                  TermFactor(
                                    ConstantNumber(
                                     0
                                    ) [ConstantNumber]
                                  ) [TermFactor]
                                ) [SingleExpression]
                              ) [Exprs]
                            ) [DesignatorNode]
                          ) [DesignatorEmpty]
                        ) [TermFactor]
                      ) [ExpressionNode]
                      AddopPlus(
                      ) [AddopPlus]
                      TermFactor(
                        DesignatorEmpty(
                          DesignatorNode(
                            SingleIdentExpr(
                             a
                            ) [SingleIdentExpr]
                          ) [DesignatorNode]
                        ) [DesignatorEmpty]
                      ) [TermFactor]
                    ) [ExpressionNode]
                  ) [ReturnStatementExpr]
                ) [Statements]
              ) [MethodDecl]
            ) [ClassMethodDeclarations]
            MethodDecl(
              MethodTypeName(
                VoidType(
                ) [VoidType]
               m
              ) [MethodTypeName]
              NoFormalParam(
              ) [NoFormalParam]
              NoVarDeclaration(
              ) [NoVarDeclaration]
              MethodLBRACE(
              ) [MethodLBRACE]
              NoStatement(
              ) [NoStatement]
            ) [MethodDecl]
          ) [ClassMethodDeclarations]
        ) [ClassDeclarationWithMethods]
      ) [ClassDeclaration]
    ) [Declarations]
    ClassDeclaration(
      ClassDeclarationWithoutMethods(
        ClassDeclIdent(
         C
        ) [ClassDeclIdent]
        Extension(
          TypeNode(
           B
          ) [TypeNode]
        ) [Extension]
        NoImplementation(
        ) [NoImplementation]
        ClassVarDeclarationList(
          ClassVarDeclarationList(
            NoClassVarDeclaration(
            ) [NoClassVarDeclaration]
            ClassVarDeclNode(
              ClassVarDeclType(
                TypeNode(
                 A
                ) [TypeNode]
              ) [ClassVarDeclType]
              SingleClassVariable(
                VariableNoBracket(
                 theA
                ) [VariableNoBracket]
              ) [SingleClassVariable]
            ) [ClassVarDeclNode]
          ) [ClassVarDeclarationList]
          ClassVarDeclNode(
            ClassVarDeclType(
              TypeNode(
               int
              ) [TypeNode]
            ) [ClassVarDeclType]
            SingleClassVariable(
              VariableNoBracket(
               a
              ) [VariableNoBracket]
            ) [SingleClassVariable]
          ) [ClassVarDeclNode]
        ) [ClassVarDeclarationList]
      ) [ClassDeclarationWithoutMethods]
    ) [ClassDeclaration]
  ) [Declarations]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      MethodTypeName(
        VoidType(
        ) [VoidType]
       main
      ) [MethodTypeName]
      NoFormalParam(
      ) [NoFormalParam]
      VarDeclarationList(
        VarDeclarationList(
          VarDeclarationList(
            VarDeclarationList(
              NoVarDeclaration(
              ) [NoVarDeclaration]
              VarDeclNode(
                VarDeclType(
                  TypeNode(
                   A
                  ) [TypeNode]
                ) [VarDeclType]
                SingleVariable(
                  VariableNoBracket(
                   a
                  ) [VariableNoBracket]
                ) [SingleVariable]
              ) [VarDeclNode]
            ) [VarDeclarationList]
            VarDeclNode(
              VarDeclType(
                TypeNode(
                 C
                ) [TypeNode]
              ) [VarDeclType]
              SingleVariable(
                VariableNoBracket(
                 c
                ) [VariableNoBracket]
              ) [SingleVariable]
            ) [VarDeclNode]
          ) [VarDeclarationList]
          VarDeclNode(
            VarDeclType(
              TypeNode(
               int
              ) [TypeNode]
            ) [VarDeclType]
            SingleVariable(
              VariableNoBracket(
               i
              ) [VariableNoBracket]
            ) [SingleVariable]
          ) [VarDeclNode]
        ) [VarDeclarationList]
        VarDeclNode(
          VarDeclType(
            TypeNode(
             int
            ) [TypeNode]
          ) [VarDeclType]
          SingleVariable(
            VariableBracket(
             x
            ) [VariableBracket]
          ) [SingleVariable]
        ) [VarDeclNode]
      ) [VarDeclarationList]
      MethodLBRACE(
      ) [MethodLBRACE]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            NoStatement(
                            ) [NoStatement]
                            DesignatorStatementOnly(
                              DesignatorStatementAssignop(
                                DesignatorNode(
                                  SingleIdentExpr(
                                   a
                                  ) [SingleIdentExpr]
                                ) [DesignatorNode]
                                Assignop(
                                ) [Assignop]
                                SingleExpression(
                                  TermFactor(
                                    NewType(
                                      TypeNode(
                                       A
                                      ) [TypeNode]
                                    ) [NewType]
                                  ) [TermFactor]
                                ) [SingleExpression]
                              ) [DesignatorStatementAssignop]
                            ) [DesignatorStatementOnly]
                          ) [Statements]
                          DesignatorStatementOnly(
                            DesignatorStatementAssignop(
                              DesignatorNode(
                                Idents(
                                  SingleIdentExpr(
                                   a
                                  ) [SingleIdentExpr]
                                 x
                                ) [Idents]
                              ) [DesignatorNode]
                              Assignop(
                              ) [Assignop]
                              SingleExpression(
                                TermFactor(
                                  NewArray(
                                    NewArrayType(
                                      TypeNode(
                                       int
                                      ) [TypeNode]
                                    ) [NewArrayType]
                                    SingleExpression(
                                      TermFactor(
                                        DesignatorEmpty(
                                          DesignatorNode(
                                            Idents(
                                              SingleIdentExpr(
                                               Broj
                                              ) [SingleIdentExpr]
                                             PET
                                            ) [Idents]
                                          ) [DesignatorNode]
                                        ) [DesignatorEmpty]
                                      ) [TermFactor]
                                    ) [SingleExpression]
                                  ) [NewArray]
                                ) [TermFactor]
                              ) [SingleExpression]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementOnly]
                        ) [Statements]
                        DesignatorStatementOnly(
                          DesignatorStatementAssignop(
                            DesignatorNode(
                              Idents(
                                SingleIdentExpr(
                                 a
                                ) [SingleIdentExpr]
                               y
                              ) [Idents]
                            ) [DesignatorNode]
                            Assignop(
                            ) [Assignop]
                            SingleExpression(
                              TermFactor(
                                NewArray(
                                  NewArrayType(
                                    TypeNode(
                                     int
                                    ) [TypeNode]
                                  ) [NewArrayType]
                                  SingleExpression(
                                    TermFactor(
                                      ConstantNumber(
                                       5
                                      ) [ConstantNumber]
                                    ) [TermFactor]
                                  ) [SingleExpression]
                                ) [NewArray]
                              ) [TermFactor]
                            ) [SingleExpression]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementOnly]
                      ) [Statements]
                      DesignatorStatementOnly(
                        DesignatorStatementAssignop(
                          DesignatorNode(
                            SingleIdentExpr(
                             c
                            ) [SingleIdentExpr]
                          ) [DesignatorNode]
                          Assignop(
                          ) [Assignop]
                          SingleExpression(
                            TermFactor(
                              NewType(
                                TypeNode(
                                 C
                                ) [TypeNode]
                              ) [NewType]
                            ) [TermFactor]
                          ) [SingleExpression]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementOnly]
                    ) [Statements]
                    DesignatorStatementOnly(
                      DesignatorStatementAssignop(
                        DesignatorNode(
                          Idents(
                            SingleIdentExpr(
                             c
                            ) [SingleIdentExpr]
                           theA
                          ) [Idents]
                        ) [DesignatorNode]
                        Assignop(
                        ) [Assignop]
                        SingleExpression(
                          TermFactor(
                            DesignatorEmpty(
                              DesignatorNode(
                                SingleIdentExpr(
                                 a
                                ) [SingleIdentExpr]
                              ) [DesignatorNode]
                            ) [DesignatorEmpty]
                          ) [TermFactor]
                        ) [SingleExpression]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementOnly]
                  ) [Statements]
                  DesignatorStatementOnly(
                    DesignatorStatementAssignop(
                      DesignatorNode(
                        Idents(
                          SingleIdentExpr(
                           c
                          ) [SingleIdentExpr]
                         x
                        ) [Idents]
                      ) [DesignatorNode]
                      Assignop(
                      ) [Assignop]
                      SingleExpression(
                        TermFactor(
                          NewArray(
                            NewArrayType(
                              TypeNode(
                               int
                              ) [TypeNode]
                            ) [NewArrayType]
                            SingleExpression(
                              TermFactor(
                                ConstantNumber(
                                 5
                                ) [ConstantNumber]
                              ) [TermFactor]
                            ) [SingleExpression]
                          ) [NewArray]
                        ) [TermFactor]
                      ) [SingleExpression]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementOnly]
                ) [Statements]
                DesignatorStatementOnly(
                  DesignatorStatementAssignop(
                    DesignatorNode(
                      SingleIdentExpr(
                       x
                      ) [SingleIdentExpr]
                    ) [DesignatorNode]
                    Assignop(
                    ) [Assignop]
                    SingleExpression(
                      TermFactor(
                        NewArray(
                          NewArrayType(
                            TypeNode(
                             int
                            ) [TypeNode]
                          ) [NewArrayType]
                          SingleExpression(
                            TermFactor(
                              DesignatorEmpty(
                                DesignatorNode(
                                  Idents(
                                    SingleIdentExpr(
                                     Broj
                                    ) [SingleIdentExpr]
                                   TRI
                                  ) [Idents]
                                ) [DesignatorNode]
                              ) [DesignatorEmpty]
                            ) [TermFactor]
                          ) [SingleExpression]
                        ) [NewArray]
                      ) [TermFactor]
                    ) [SingleExpression]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementOnly]
              ) [Statements]
              ReadStatement(
                DesignatorNode(
                  Idents(
                    SingleIdentExpr(
                     c
                    ) [SingleIdentExpr]
                   i
                  ) [Idents]
                ) [DesignatorNode]
              ) [ReadStatement]
            ) [Statements]
            ForStatement(
              ForHeader(
                ForStatement1(
                  DesignatorStatementNotNull(
                    DesignatorStatementAssignop(
                      DesignatorNode(
                        SingleIdentExpr(
                         i
                        ) [SingleIdentExpr]
                      ) [DesignatorNode]
                      Assignop(
                      ) [Assignop]
                      SingleExpression(
                        TermFactor(
                          ConstantNumber(
                           0
                          ) [ConstantNumber]
                        ) [TermFactor]
                      ) [SingleExpression]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementNotNull]
                ) [ForStatement1]
                ForCondition(
                  ConditionNotNull(
                    ConditionNode(
                      SingleConditionTerm(
                        ConditionTermNode(
                          SingleConditionFact(
                            CondFactExpressionRelopExpression(
                              SingleExpression(
                                TermFactor(
                                  DesignatorEmpty(
                                    DesignatorNode(
                                      SingleIdentExpr(
                                       i
                                      ) [SingleIdentExpr]
                                    ) [DesignatorNode]
                                  ) [DesignatorEmpty]
                                ) [TermFactor]
                              ) [SingleExpression]
                              RelopLess(
                              ) [RelopLess]
                              SingleExpression(
                                TermFactor(
                                  ConstantNumber(
                                   5
                                  ) [ConstantNumber]
                                ) [TermFactor]
                              ) [SingleExpression]
                            ) [CondFactExpressionRelopExpression]
                          ) [SingleConditionFact]
                        ) [ConditionTermNode]
                      ) [SingleConditionTerm]
                    ) [ConditionNode]
                  ) [ConditionNotNull]
                ) [ForCondition]
                ForStatement2(
                  DesignatorStatementNotNull(
                    DesignatorStatementPlusPlus(
                      DesignatorNode(
                        SingleIdentExpr(
                         i
                        ) [SingleIdentExpr]
                      ) [DesignatorNode]
                    ) [DesignatorStatementPlusPlus]
                  ) [DesignatorStatementNotNull]
                ) [ForStatement2]
              ) [ForHeader]
              InBraceStatement(
                Statements(
                  Statements(
                    NoStatement(
                    ) [NoStatement]
                    ReadStatement(
                      DesignatorNode(
                        Exprs(
                          IdentExprListArray(
                            Idents(
                              SingleIdentExpr(
                               c
                              ) [SingleIdentExpr]
                             x
                            ) [Idents]
                          ) [IdentExprListArray]
                          SingleExpression(
                            TermFactor(
                              DesignatorEmpty(
                                DesignatorNode(
                                  SingleIdentExpr(
                                   i
                                  ) [SingleIdentExpr]
                                ) [DesignatorNode]
                              ) [DesignatorEmpty]
                            ) [TermFactor]
                          ) [SingleExpression]
                        ) [Exprs]
                      ) [DesignatorNode]
                    ) [ReadStatement]
                  ) [Statements]
                  ReadStatement(
                    DesignatorNode(
                      Exprs(
                        IdentExprListArray(
                          Idents(
                            Idents(
                              SingleIdentExpr(
                               c
                              ) [SingleIdentExpr]
                             theA
                            ) [Idents]
                           x
                          ) [Idents]
                        ) [IdentExprListArray]
                        SingleExpression(
                          TermFactor(
                            DesignatorEmpty(
                              DesignatorNode(
                                SingleIdentExpr(
                                 i
                                ) [SingleIdentExpr]
                              ) [DesignatorNode]
                            ) [DesignatorEmpty]
                          ) [TermFactor]
                        ) [SingleExpression]
                      ) [Exprs]
                    ) [DesignatorNode]
                  ) [ReadStatement]
                ) [Statements]
              ) [InBraceStatement]
            ) [ForStatement]
          ) [Statements]
          PrintStatement(
            SingleExpression(
              TermFactor(
                DesignatorBraceActPars(
                  DesignatorNode(
                    Idents(
                      SingleIdentExpr(
                       c
                      ) [SingleIdentExpr]
                     getValue
                    ) [Idents]
                  ) [DesignatorNode]
                  ActParsNode(
                    SingleActualParam(
                      SingleExpression(
                        TermFactor(
                          DesignatorEmpty(
                            DesignatorNode(
                              Exprs(
                                IdentExprListArray(
                                  Idents(
                                    Idents(
                                      SingleIdentExpr(
                                       c
                                      ) [SingleIdentExpr]
                                     theA
                                    ) [Idents]
                                   x
                                  ) [Idents]
                                ) [IdentExprListArray]
                                SingleExpression(
                                  TermFactor(
                                    DesignatorEmpty(
                                      DesignatorNode(
                                        Idents(
                                          SingleIdentExpr(
                                           Broj
                                          ) [SingleIdentExpr]
                                         NULA
                                        ) [Idents]
                                      ) [DesignatorNode]
                                    ) [DesignatorEmpty]
                                  ) [TermFactor]
                                ) [SingleExpression]
                              ) [Exprs]
                            ) [DesignatorNode]
                          ) [DesignatorEmpty]
                        ) [TermFactor]
                      ) [SingleExpression]
                    ) [SingleActualParam]
                  ) [ActParsNode]
                ) [DesignatorBraceActPars]
              ) [TermFactor]
            ) [SingleExpression]
          ) [PrintStatement]
        ) [Statements]
        DesignatorStatementOnly(
          DesignatorStatementActPars(
            DesignatorNode(
              Idents(
                SingleIdentExpr(
                 c
                ) [SingleIdentExpr]
               m
              ) [Idents]
            ) [DesignatorNode]
            NoActAprsNode(
            ) [NoActAprsNode]
          ) [DesignatorStatementActPars]
        ) [DesignatorStatementOnly]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  04:14:28,773 - ===================================
INFO  04:14:28,778 - Deklarisana metoda m u okviru interfejsa I na liniji 2
INFO  04:14:28,779 - Deklarisan novi interfejs: I na liniji 2
INFO  04:14:28,779 - Deklarisanp array polje x na liniji 3
INFO  04:14:28,779 - Deklarisanp array polje y na liniji 3
INFO  04:14:28,779 - Deklarisana nova klasa: A na liniji 3
INFO  04:14:28,779 - Definisana konstanta (3)pi na liniji 4
INFO  04:14:28,779 - Definisana konstanta (2)e na liniji 4
INFO  04:14:28,779 - Deklarisan novi enum tip: Broj na liniji 5
INFO  04:14:28,779 - Definisana enum konstanta NULA sa vrednoscu 0 na liniji 5
INFO  04:14:28,779 - Definisana enum konstanta TRI sa vrednoscu 3 na liniji 5
INFO  04:14:28,779 - Definisana enum konstanta PET sa vrednoscu 5 na liniji 5
INFO  04:14:28,780 - Deklarisano single polje i na liniji 7
INFO  04:14:28,780 - Deklarisanp array polje x na liniji 7
INFO  04:14:28,780 - Deklarisana metoda getValue u okviru klase B na liniji 9
INFO  04:14:28,780 - Deklarisan single argument a na liniji 9
INFO  04:14:28,780 - Deklarisana single promenljiva b na liniji 9
INFO  04:14:28,780 - Deklarisana single promenljiva c na liniji 9
ERROR 04:14:28,780 - Greska na liniji 9 : ime this nije deklarisano! 
ERROR 04:14:28,780 - Greska na liniji 9 : podrzani samo Enum i Class/Interface tipovi. 
ERROR 04:14:28,780 - Greska na liniji 9 : ime this nije deklarisano! 
ERROR 04:14:28,780 - Greska na liniji 9 : podrzani samo Enum i Class/Interface tipovi. 
ERROR 04:14:28,780 - Greska na liniji 9 : nekompatibilni tipovi u izrazu za sabiranje.
INFO  04:14:28,781 - Pronadjen poziv promenljive [Var a: int, 0, 1 ] na liniji 9
ERROR 04:14:28,781 - Greska na liniji 9 : nekompatibilni tipovi u izrazu za sabiranje.
ERROR 04:14:28,781 - Greska : tip izraza u return naredbi ne slaze se sa tipom povratne vrednosti funkcije getValue
INFO  04:14:28,781 - Deklarisana metoda m u okviru klase B na liniji 10
INFO  04:14:28,781 - Deklarisana nova klasa: B na liniji 6
INFO  04:14:28,781 - Deklarisano single polje theA na liniji 13
INFO  04:14:28,781 - Deklarisano single polje a na liniji 13
INFO  04:14:28,781 - Deklarisana nova klasa: C na liniji 13
INFO  04:14:28,781 - Definisana funkcija main na liniji 15
INFO  04:14:28,781 - Deklarisana single promenljiva a na liniji 15
INFO  04:14:28,781 - Deklarisana single promenljiva c na liniji 15
INFO  04:14:28,781 - Deklarisana single promenljiva i na liniji 15
INFO  04:14:28,781 - Deklarisana array promenljiva x na liniji 15
INFO  04:14:28,781 - Dodela vrednosti za a na liniji 16
INFO  04:14:28,781 - Izabrano polje : .x | [Fld x: Arr of int, 0, 1 ] |
INFO  04:14:28,781 - Izabrano polje : .PET | [Con PET: int, 5, 1 ] |
INFO  04:14:28,781 - Pronadjen poziv promenljive [Con PET: int, 5, 1 ] na liniji 17
INFO  04:14:28,781 - Dodela vrednosti za x na liniji 17
INFO  04:14:28,781 - Izabrano polje : .y | [Fld y: Arr of int, 1, 1 ] |
INFO  04:14:28,781 - Dodela vrednosti za y na liniji 18
INFO  04:14:28,781 - Dodela vrednosti za c na liniji 19
INFO  04:14:28,781 - Izabrano polje : .theA | [Fld theA: Class [], 0, 1 ] |
INFO  04:14:28,781 - Pronadjen poziv promenljive [Var a: Class [], 0, 1 ] na liniji 20
INFO  04:14:28,781 - Dodela vrednosti za theA na liniji 20
ERROR 04:14:28,781 - Greska na liniji 21 : polje x nije deklarisano! (u okviru:c)
ERROR 04:14:28,782 - Greska na liniji 21 : nekompatibilni tipovi u dodeli vrednosti! 
INFO  04:14:28,782 - Izabrano polje : .TRI | [Con TRI: int, 3, 1 ] |
INFO  04:14:28,782 - Pronadjen poziv promenljive [Con TRI: int, 3, 1 ] na liniji 22
INFO  04:14:28,782 - Dodela vrednosti za x na liniji 22
ERROR 04:14:28,782 - Greska na liniji 23 : polje i nije deklarisano! (u okviru:c)
ERROR 04:14:28,782 - Greska na liniji 23 : Nekompatibilan tip u read funkciji. 
INFO  04:14:28,782 - Dodela vrednosti za i na liniji 24
INFO  04:14:28,782 - Pronadjen poziv promenljive [Var i: int, 2, 1 ] na liniji 24
ERROR 04:14:28,782 - Greska na liniji 25 : polje x nije deklarisano! (u okviru:c)
INFO  04:14:28,782 - Pronadjen poziv promenljive [Var i: int, 2, 1 ] na liniji 25
ERROR 04:14:28,782 - Greska na liniji 25 : Nekompatibilan tip u read funkciji. 
INFO  04:14:28,782 - Izabrano polje : .theA | [Fld theA: Class [], 0, 1 ] |
INFO  04:14:28,782 - Izabrano polje : .x | [Fld x: Arr of int, 0, 1 ] |
INFO  04:14:28,782 - Pronadjen poziv promenljive [Var i: int, 2, 1 ] na liniji 25
ERROR 04:14:28,782 - Greska na liniji 27 : polje getValue nije deklarisano! (u okviru:c)
INFO  04:14:28,782 - Izabrano polje : .theA | [Fld theA: Class [], 0, 1 ] |
INFO  04:14:28,782 - Izabrano polje : .x | [Fld x: Arr of int, 0, 1 ] |
INFO  04:14:28,782 - Izabrano polje : .NULA | [Con NULA: int, 0, 1 ] |
INFO  04:14:28,782 - Pronadjen poziv promenljive [Con NULA: int, 0, 1 ] na liniji 27
INFO  04:14:28,782 - Pronadjen poziv promenljive [$elem: int, -1, -1 ] na liniji 27
ERROR 04:14:28,782 - Greska na liniji 27 : ime noObj nije funkcija!
ERROR 04:14:28,782 - Greska na liniji 27 : Nekompatibilan tip izraza u print funkciji. 
ERROR 04:14:28,782 - Greska na liniji 28 : polje m nije deklarisano! (u okviru:c)
ERROR 04:14:28,782 - Greska na liniji 28 : ime noObj nije funkcija!
INFO  04:14:28,782 - main funkcija je korektna.  na liniji 15
INFO  04:14:28,782 - ===================================
ERROR 04:14:28,783 - Parsiranje NIJE uspesno zavrseno!
